(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    302912,       5652]
NotebookOptionsPosition[    299357,       5587]
NotebookOutlinePosition[    299691,       5602]
CellTagsIndexPosition[    299648,       5599]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ToBinaryArray", "[", "decimalNumber_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Floor", "[", 
        FractionBox["decimalNumber", "4"], "]"}], ",", 
       RowBox[{"Floor", "[", " ", 
        FractionBox[
         RowBox[{" ", 
          RowBox[{"Mod", "[", 
           RowBox[{"decimalNumber", ",", "4"}], "]"}]}], "2"], "]"}], ",", 
       " ", 
       RowBox[{"Mod", "[", 
        RowBox[{"decimalNumber", ",", "2"}], "]"}]}], "\[IndentingNewLine]", 
      "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Workspace2", "[", 
    RowBox[{
     RowBox[{"n_:", "1"}], ",", 
     RowBox[{"length_:", "1000"}], ",", " ", 
     RowBox[{"width_:", "1000"}], ",", " ", 
     RowBox[{"height_:", "1000"}]}], "]"}], " ", "=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"preaxes", "=", 
        RowBox[{"ToBinaryArray", "[", "n", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"axes", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"length", ",", " ", "width", ",", " ", "height"}], "}"}]}]}],
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"axes", "[", 
         RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
        RowBox[{
         RowBox[{"preaxes", "[", 
          RowBox[{"[", "1", "]"}], "]"}], " ", 
         RowBox[{"axes", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"axes", "[", 
         RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
        RowBox[{
         RowBox[{"preaxes", "[", 
          RowBox[{"[", "2", "]"}], "]"}], " ", 
         RowBox[{"axes", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"axes", "[", 
         RowBox[{"[", "3", "]"}], "]"}], " ", "=", " ", 
        RowBox[{
         RowBox[{"preaxes", "[", 
          RowBox[{"[", "3", "]"}], "]"}], " ", 
         RowBox[{"axes", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       "axes"}], "\[IndentingNewLine]", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Workspace", "[", 
    RowBox[{
     RowBox[{"length_:", "1000"}], ",", " ", 
     RowBox[{"width_:", "1000"}], ",", " ", 
     RowBox[{"height_:", "1000"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"vertices", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Workspace2", "[", 
           RowBox[{
           "x", ",", " ", "length", ",", " ", "width", ",", " ", "height"}], 
           "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "0", ",", "7"}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"workspacePolygon", " ", "=", " ", 
      RowBox[{"Polygon", "[", 
       RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"0", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"4", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"6", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"2", "+", "1"}], "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"0", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"1", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"3", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"2", "+", "1"}], "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"2", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"3", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"7", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"6", "+", "1"}], "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"1", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"3", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"7", "+", "1"}], "]"}], "]"}], ",", 
           RowBox[{"vertices", "[", 
            RowBox[{"[", 
             RowBox[{"5", "+", "1"}], "]"}], "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DegreestoRadians", "[", "degrees_", "]"}], ":=", 
   FractionBox[
    RowBox[{"degrees", " ", "*", " ", "Pi"}], "180"]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EndEffector", "[", 
    RowBox[{
     RowBox[{"x_:", "0"}], ",", 
     RowBox[{"y_:", "0"}], ",", " ", 
     RowBox[{"z_:", "0"}], ",", " ", "\[Theta]_", ",", " ", "\[Phi]_", ",", 
     " ", "\[Alpha]_", ",", " ", "lengthWorkspace_", ",", "widthWorkspace_", 
     ",", "heightWorkspace_", ",", " ", 
     RowBox[{"length_:", "150"}], ",", " ", 
     RowBox[{"width_:", "150"}], ",", " ", 
     RowBox[{"height_:", "150"}]}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"workspaceMidPoint", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          FractionBox["lengthWorkspace", "2"], ",", 
          FractionBox["widthWorkspace", "2"], ",", " ", 
          FractionBox["heightWorkspace", "2"]}], " ", "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"effectorOriginMidpoint", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          FractionBox["length", "2"], ",", " ", 
          FractionBox["width", "2"], ",", " ", 
          FractionBox["height", "2"]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{",", "\[IndentingNewLine]", 
         RowBox[{"vertices", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Workspace2", "[", 
              RowBox[{
              "xx", ",", " ", "length", ",", " ", "width", ",", " ", 
               "height"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"xx", ",", "0", ",", "7"}], "}"}]}], "]"}]}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"WorkSpaceVertices", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Workspace2", "[", 
            RowBox[{
            "xx", ",", " ", "lengthWorkspace", ",", " ", "widthWorkspace", 
             ",", " ", "heightWorkspace"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"xx", ",", "0", ",", "7"}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"effectorOriginDisplacementVectr", " ", "=", " ", 
        RowBox[{
        "workspaceMidPoint", " ", "-", " ", "effectorOriginMidpoint"}]}], 
       ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "effectorOriginDisplacementVectr", " ", "=", " ", "workspaceMidPoint"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"vertices", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"RotationMatrix", "[", 
             RowBox[{
              RowBox[{"DegreestoRadians", "[", "\[Alpha]", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}], ".", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"RotationMatrix", "[", 
               RowBox[{
                RowBox[{"DegreestoRadians", "[", "\[Phi]", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "]"}], ".", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"RotationMatrix", "[", 
                 RowBox[{
                  RowBox[{"DegreestoRadians", "[", "\[Theta]", "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "]"}], ".", 
                " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Workspace2", "[", 
                    RowBox[{
                    "xx", ",", " ", "length", ",", " ", "width", ",", " ", 
                    "height"}], "]"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "  ", "-", 
                  "effectorOriginMidpoint"}], ")"}]}], ")"}]}], ")"}]}], 
           ")"}], "+", 
          RowBox[{"(", 
           RowBox[{"(*", "*)"}], 
           RowBox[{"effectorOriginDisplacementVectr", "+", 
            RowBox[{"(*", "*)"}], 
            RowBox[{"{", 
             RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], ")"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"xx", ",", "0", ",", "7"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "workspaceMidPoint", ",", "effectorOriginMidpoint", ",", " ", 
          "effectorOriginDisplacementVectr"}], "}"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"surface1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"0", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"4", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"5", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"1", "+", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"surface2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"0", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"4", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"6", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"2", "+", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"surface3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"0", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"1", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"3", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"2", "+", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"surface4", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"2", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"3", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"7", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"6", "+", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"surface5", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"1", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"3", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"7", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"5", "+", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"surface6", " ", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"4", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"5", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"7", "+", "1"}], "]"}], "]"}], ",", 
         RowBox[{"vertices", "[", 
          RowBox[{"[", 
           RowBox[{"6", "+", "1"}], "]"}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"endEffector", " ", "=", " ", 
         RowBox[{"Polygon", "[", 
          RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{
           "surface1", ",", "\[IndentingNewLine]", "surface2", ",", 
            "\[IndentingNewLine]", "surface3", ",", "\[IndentingNewLine]", 
            "surface4", ",", "\[IndentingNewLine]", "surface5", ",", 
            "\[IndentingNewLine]", "surface6"}], "\[IndentingNewLine]", "}"}],
           "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"WorkSpaceVertices", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
           RowBox[{"WorkSpaceVertices", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", "3", "]"}], "]"}], ",", " ", 
           RowBox[{"WorkSpaceVertices", "[", 
            RowBox[{"[", "3", "]"}], "]"}]}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", "4", "]"}], "]"}], ",", " ", 
           RowBox[{"WorkSpaceVertices", "[", 
            RowBox[{"[", "4", "]"}], "]"}]}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", "5", "]"}], "]"}], ",", " ", 
           RowBox[{"WorkSpaceVertices", "[", 
            RowBox[{"[", "5", "]"}], "]"}]}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", "6", "]"}], "]"}], ",", " ", 
           RowBox[{"WorkSpaceVertices", "[", 
            RowBox[{"[", "6", "]"}], "]"}]}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", "7", "]"}], "]"}], ",", " ", 
           RowBox[{"WorkSpaceVertices", "[", 
            RowBox[{"[", "7", "]"}], "]"}]}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"vertices", "[", 
            RowBox[{"[", "8", "]"}], "]"}], ",", " ", 
           RowBox[{"WorkSpaceVertices", "[", 
            RowBox[{"[", "8", "]"}], "]"}]}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"vertices", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "-", 
         RowBox[{"WorkSpaceVertices", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
       "}"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"EndEffector", "[", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "4000", ",", 
     "2000", ",", "3000"}], "]"}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Blue", ",", 
       RowBox[{"Workspace", "[", 
        RowBox[{"4000", ",", "2000", ",", "3000"}], "]"}], ",", 
       RowBox[{"EndEffector", "[", 
        RowBox[{
        "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "4000", 
         ",", "2000", ",", "3000"}], "]"}]}], " ", "}"}], ",", " ", 
     RowBox[{"Axes", "->", 
      RowBox[{"{", 
       RowBox[{"True", ",", " ", "True", ",", " ", "True"}], "}"}]}]}], "]"}],
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{
     RowBox[{"EndEffector", "[", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "4000", ",",
        "2000", ",", "3000"}], "]"}], ",", " ", 
     RowBox[{"Axes", "->", 
      RowBox[{"{", 
       RowBox[{"True", ",", " ", "True", ",", " ", "True"}], "}"}]}]}], "]"}],
    "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Graphics3D", "[", 
  RowBox[{"Polygon", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Graphics3D", "[", 
  RowBox[{"Polygon", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "2000", ",", "0"}], "}"}]}], "}"}]}], "}"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Workspace", "[", 
  RowBox[{"2000", ",", "2000", ",", "2000"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Graphics3D", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Workspace", "[", 
     RowBox[{"2000", ",", "2000", ",", "2000"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"Graphics3D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Workspace", "[", 
        RowBox[{"2000", ",", "2000", ",", "2000"}], "]"}], ",", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\[IndentingNewLine]", 
       "Green", ",", "Thick", ",", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", "\[IndentingNewLine]", "Red", 
       ",", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "3", "]"}], "]"}], ",", "\[IndentingNewLine]", "Yellow", 
       ",", " ", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "4", "]"}], "]"}], ",", "\[IndentingNewLine]", "Orange", 
       ",", " ", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "5", "]"}], "]"}], ",", "\[IndentingNewLine]", "Black", 
       ",", " ", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "6", "]"}], "]"}], ",", "\[IndentingNewLine]", "Blue", 
       ",", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "7", "]"}], "]"}], ",", "\[IndentingNewLine]", "Gray", 
       ",", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "8", "]"}], "]"}], ",", "\[IndentingNewLine]", "White", 
       ",", 
       RowBox[{
        RowBox[{"EndEffector", "[", 
         RowBox[{
         "x", ",", "y", ",", "z", ",", "\[Theta]", ",", "\[Phi]", ",", " ", 
          "\[Alpha]", ",", "2000", ",", "2000", ",", "2000"}], "]"}], " ", 
        "[", 
        RowBox[{"[", "9", "]"}], "]"}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "}"}], ",", " ", 
     RowBox[{"Axes", "->", 
      RowBox[{"{", 
       RowBox[{"True", ",", " ", "True", ",", " ", "True"}], "}"}]}]}], "]"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "900"}], ",", "900"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "900"}], ",", "900"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"z", ",", 
     RowBox[{"-", "900"}], ",", "900"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", 
     RowBox[{"-", "90"}], ",", "90"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", ",", 
     RowBox[{"-", "90"}], ",", "90"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", 
     RowBox[{"-", "90"}], ",", "90"}], "}"}], ",", 
   RowBox[{"AnimationRunning", "\[Rule]", "False"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7815768645446215`*^9, 3.781577250703624*^9}, 
   3.78157729931953*^9, {3.7815777532990417`*^9, 3.7815778441829033`*^9}, {
   3.781577878345068*^9, 3.781577909042943*^9}, {3.7815779492453938`*^9, 
   3.781577998029519*^9}, {3.781578103976087*^9, 3.7815781254236774`*^9}, {
   3.781578251023574*^9, 3.781578528910495*^9}, {3.781578564617939*^9, 
   3.781578583622119*^9}, {3.7815786284013357`*^9, 3.781578747492734*^9}, {
   3.781578782100149*^9, 3.7815788682325106`*^9}, {3.7815789005081873`*^9, 
   3.7815789713985696`*^9}, {3.781579043004774*^9, 3.7815791243947144`*^9}, {
   3.78157946983119*^9, 3.781579568144151*^9}, {3.7815796005833445`*^9, 
   3.7815796413133726`*^9}, {3.781579679079319*^9, 3.781579682142143*^9}, {
   3.781579716124423*^9, 3.7815798092846255`*^9}, {3.7815799361671634`*^9, 
   3.7815799831235723`*^9}, {3.781580017229068*^9, 3.781580074667977*^9}, {
   3.781580119739427*^9, 3.7815803542326384`*^9}, {3.781580403808013*^9, 
   3.781580600412018*^9}, {3.78158096488214*^9, 3.781581024775453*^9}, {
   3.7815810846355324`*^9, 3.7815810872305627`*^9}, {3.7815811312823224`*^9, 
   3.781581248651412*^9}, {3.7815813354701676`*^9, 3.781581448945541*^9}, {
   3.7815815164175873`*^9, 3.7815815490459313`*^9}, {3.781581579520437*^9, 
   3.781581580584585*^9}, {3.7815816436289177`*^9, 3.7815816548758082`*^9}, {
   3.781581722270141*^9, 3.7815817252611403`*^9}, {3.78158176752481*^9, 
   3.7815817803604717`*^9}, {3.781581828784235*^9, 3.7815820815814886`*^9}, {
   3.781582116533435*^9, 3.781582118778442*^9}, {3.7815821573489885`*^9, 
   3.781582225164566*^9}, {3.7815825780654716`*^9, 3.781582638098877*^9}, {
   3.7815827000710573`*^9, 3.7815828572962728`*^9}, {3.781583084176749*^9, 
   3.7815832688237696`*^9}, {3.7815833054886503`*^9, 
   3.7815835048140483`*^9}, {3.7815835932025533`*^9, 
   3.7815836421017666`*^9}, {3.7815839994915304`*^9, 3.781584043806876*^9}, {
   3.781584076541334*^9, 3.7815840766670012`*^9}, {3.7815841104695406`*^9, 
   3.7815841200658903`*^9}, {3.7815841600010405`*^9, 3.781584160655275*^9}, 
   3.781584244701414*^9, {3.7815843223184156`*^9, 3.781584367136546*^9}, {
   3.7815843993279943`*^9, 3.7815844145921545`*^9}, {3.7815845435552893`*^9, 
   3.781584561668829*^9}, {3.781585536039937*^9, 3.7815856403339405`*^9}, {
   3.781585672204661*^9, 3.7815856993849444`*^9}, {3.781585823476114*^9, 
   3.7815858394583564`*^9}, {3.7815859404511995`*^9, 3.781585949383278*^9}, {
   3.7815860063238144`*^9, 3.781586010252409*^9}, {3.7815861594758463`*^9, 
   3.781586159819898*^9}, {3.7815862787407737`*^9, 3.781586293147238*^9}, {
   3.7815863577496862`*^9, 3.7815863858175955`*^9}, {3.7815864867156353`*^9, 
   3.781586576298977*^9}, {3.781586613057129*^9, 3.7815867324440393`*^9}, {
   3.7815868122665186`*^9, 3.7815868167435417`*^9}, {3.781586851617917*^9, 
   3.7815868852998424`*^9}, {3.78158692154593*^9, 3.7815869274967422`*^9}, {
   3.7815871198315144`*^9, 3.7815871769616766`*^9}, {3.781587308963716*^9, 
   3.7815874115452824`*^9}, {3.781587510066812*^9, 3.781587553470578*^9}, {
   3.7815876359232492`*^9, 3.7815877538308115`*^9}, {3.781589360263937*^9, 
   3.781589360981024*^9}, {3.78158939966949*^9, 3.781589418515073*^9}, {
   3.781589454555687*^9, 3.7815894777536297`*^9}, {3.781589613234691*^9, 
   3.7815896305365677`*^9}, {3.781787859358633*^9, 3.781787884591996*^9}, {
   3.78200505521633*^9, 3.7820050730012302`*^9}, {3.782005106080967*^9, 
   3.782005113847371*^9}, {3.7820053087234783`*^9, 3.7820053345953093`*^9}, {
   3.7820054204045887`*^9, 3.7820054209584723`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"d6afe538-2965-47b7-b90b-d7b99bf49e7a"],

Cell[BoxData[
 Graphics3DBox[Polygon3DBox[{{1, 0, 0}, {1, 1, 1}, {0, 0, 1}}],
  ImageSize->{367.16565970114283`, 396.34323611782406`},
  ImageSizeRaw->Automatic,
  ViewPoint->{1.3696129914794049`, -2.336185313384985, 2.0288909372105577`},
  ViewVertical->{0.012903401252706939`, 9.846588238654994*^-6, 
   0.9999167476040974}]], "Output",
 CellChangeTimes->{{3.7815804917866473`*^9, 3.7815805183884654`*^9}, {
   3.78158056456894*^9, 3.7815806013355737`*^9}, 3.7815809770993795`*^9, {
   3.781581397081303*^9, 3.7815814501323967`*^9}, {3.781581528771199*^9, 
   3.781581551216161*^9}, {3.7815816557953496`*^9, 3.781581681995289*^9}, 
   3.7815817510708356`*^9, 3.781581782036991*^9, 3.7815818615960073`*^9, 
   3.78158190881868*^9, {3.7815819449311123`*^9, 3.781582019549465*^9}, {
   3.7815820561874514`*^9, 3.7815820832310753`*^9}, 3.7815821202225504`*^9, {
   3.781582187960082*^9, 3.781582205037383*^9}, 3.7815826004784946`*^9, {
   3.781582630788418*^9, 3.7815826386583853`*^9}, {3.781582711194624*^9, 
   3.7815827385529723`*^9}, 3.7815827697763996`*^9, {3.7815828174877443`*^9, 
   3.781582827046173*^9}, 3.7815831017437215`*^9, {3.7815831639772563`*^9, 
   3.781583177069235*^9}, 3.7815832260810947`*^9, 3.781583270325718*^9, 
   3.781583338091074*^9, {3.7815833735871077`*^9, 3.7815834536548786`*^9}, {
   3.7815834848424435`*^9, 3.781583505670724*^9}, {3.7815836036535916`*^9, 
   3.7815836322092257`*^9}, 3.7815840448670406`*^9, 3.7815840775635843`*^9, 
   3.781584128938161*^9, 3.781584162260979*^9, {3.781584225626036*^9, 
   3.7815842457785325`*^9}, {3.7815843240816994`*^9, 3.781584343746163*^9}, 
   3.7815844154568424`*^9, {3.781584545289657*^9, 3.781584563076066*^9}, 
   3.781585565357504*^9, 3.781585642084241*^9, 3.7815857016099925`*^9, 
   3.7815858415128593`*^9, 3.7815859520341864`*^9, 3.781586019036909*^9, 
   3.781586161348837*^9, 3.7815862951857595`*^9, 3.7815863588546977`*^9, 
   3.781586390494068*^9, {3.7815866267009573`*^9, 3.781586676567557*^9}, 
   3.7815867336568213`*^9, 3.781586818745161*^9, 3.7815868865235662`*^9, 
   3.7815869292191076`*^9, {3.781587163343089*^9, 3.78158717797295*^9}, 
   3.781587320923749*^9, {3.781587386789511*^9, 3.781587412583506*^9}, 
   3.7815875168645964`*^9, 3.7815875546075726`*^9, 3.781587638717743*^9, 
   3.78158775572771*^9, 3.7815893627582693`*^9, 3.781589424397337*^9, 
   3.781589478961363*^9, 3.7815896334178405`*^9, 3.781786130703319*^9, 
   3.7820050069852743`*^9, {3.7820050597306356`*^9, 3.782005073883917*^9}, {
   3.782005108256641*^9, 3.782005142616005*^9}, {3.782005311149001*^9, 
   3.782005336183545*^9}, 3.7820053866047792`*^9, 3.7820054223654833`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"e1b392f1-a0cf-4fce-bfeb-5301b9f46d8a"],

Cell[BoxData[
 Graphics3DBox[
  Polygon3DBox[{{{0, 2000, 0}, {0, 2000, 0}, {0, 2000, 0}, {0, 2000, 0}}, {{0,
    2000, 0}, {0, 2000, 0}, {0, 2000, 0}, {0, 2000, 0}}, {{0, 2000, 0}, {0, 
   2000, 0}, {0, 2000, 0}, {0, 2000, 0}}, {{0, 2000, 0}, {0, 2000, 0}, {0, 
   2000, 0}, {0, 2000, 0}}}],
  ImageSize->{367.16565970114283`, 396.34323611782406`},
  ImageSizeRaw->Automatic,
  ViewPoint->{1.3696129914794049`, -2.336185313384985, 2.0288909372105577`},
  ViewVertical->{0.012903401252706939`, 9.846588238654994*^-6, 
   0.9999167476040974}]], "Output",
 CellChangeTimes->{{3.7815804917866473`*^9, 3.7815805183884654`*^9}, {
   3.78158056456894*^9, 3.7815806013355737`*^9}, 3.7815809770993795`*^9, {
   3.781581397081303*^9, 3.7815814501323967`*^9}, {3.781581528771199*^9, 
   3.781581551216161*^9}, {3.7815816557953496`*^9, 3.781581681995289*^9}, 
   3.7815817510708356`*^9, 3.781581782036991*^9, 3.7815818615960073`*^9, 
   3.78158190881868*^9, {3.7815819449311123`*^9, 3.781582019549465*^9}, {
   3.7815820561874514`*^9, 3.7815820832310753`*^9}, 3.7815821202225504`*^9, {
   3.781582187960082*^9, 3.781582205037383*^9}, 3.7815826004784946`*^9, {
   3.781582630788418*^9, 3.7815826386583853`*^9}, {3.781582711194624*^9, 
   3.7815827385529723`*^9}, 3.7815827697763996`*^9, {3.7815828174877443`*^9, 
   3.781582827046173*^9}, 3.7815831017437215`*^9, {3.7815831639772563`*^9, 
   3.781583177069235*^9}, 3.7815832260810947`*^9, 3.781583270325718*^9, 
   3.781583338091074*^9, {3.7815833735871077`*^9, 3.7815834536548786`*^9}, {
   3.7815834848424435`*^9, 3.781583505670724*^9}, {3.7815836036535916`*^9, 
   3.7815836322092257`*^9}, 3.7815840448670406`*^9, 3.7815840775635843`*^9, 
   3.781584128938161*^9, 3.781584162260979*^9, {3.781584225626036*^9, 
   3.7815842457785325`*^9}, {3.7815843240816994`*^9, 3.781584343746163*^9}, 
   3.7815844154568424`*^9, {3.781584545289657*^9, 3.781584563076066*^9}, 
   3.781585565357504*^9, 3.781585642084241*^9, 3.7815857016099925`*^9, 
   3.7815858415128593`*^9, 3.7815859520341864`*^9, 3.781586019036909*^9, 
   3.781586161348837*^9, 3.7815862951857595`*^9, 3.7815863588546977`*^9, 
   3.781586390494068*^9, {3.7815866267009573`*^9, 3.781586676567557*^9}, 
   3.7815867336568213`*^9, 3.781586818745161*^9, 3.7815868865235662`*^9, 
   3.7815869292191076`*^9, {3.781587163343089*^9, 3.78158717797295*^9}, 
   3.781587320923749*^9, {3.781587386789511*^9, 3.781587412583506*^9}, 
   3.7815875168645964`*^9, 3.7815875546075726`*^9, 3.781587638717743*^9, 
   3.78158775572771*^9, 3.7815893627582693`*^9, 3.781589424397337*^9, 
   3.781589478961363*^9, 3.7815896334178405`*^9, 3.781786130703319*^9, 
   3.7820050069852743`*^9, {3.7820050597306356`*^9, 3.782005073883917*^9}, {
   3.782005108256641*^9, 3.782005142616005*^9}, {3.782005311149001*^9, 
   3.782005336183545*^9}, 3.7820053866047792`*^9, 3.78200542241502*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"c5ce907b-4dd7-46f0-839b-4d4363fbc33d"],

Cell[BoxData[
 RowBox[{"Polygon", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2000", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2000", ",", "2000", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2000", ",", "0"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "2000"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2000", ",", "2000"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2000", ",", "0"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "2000", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2000", ",", "2000"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2000", ",", "2000", ",", "2000"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2000", ",", "2000", ",", "0"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "2000"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2000", ",", "2000"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2000", ",", "2000", ",", "2000"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2000", ",", "0", ",", "2000"}], "}"}]}], "}"}]}], "}"}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.7815804917866473`*^9, 3.7815805183884654`*^9}, {
   3.78158056456894*^9, 3.7815806013355737`*^9}, 3.7815809770993795`*^9, {
   3.781581397081303*^9, 3.7815814501323967`*^9}, {3.781581528771199*^9, 
   3.781581551216161*^9}, {3.7815816557953496`*^9, 3.781581681995289*^9}, 
   3.7815817510708356`*^9, 3.781581782036991*^9, 3.7815818615960073`*^9, 
   3.78158190881868*^9, {3.7815819449311123`*^9, 3.781582019549465*^9}, {
   3.7815820561874514`*^9, 3.7815820832310753`*^9}, 3.7815821202225504`*^9, {
   3.781582187960082*^9, 3.781582205037383*^9}, 3.7815826004784946`*^9, {
   3.781582630788418*^9, 3.7815826386583853`*^9}, {3.781582711194624*^9, 
   3.7815827385529723`*^9}, 3.7815827697763996`*^9, {3.7815828174877443`*^9, 
   3.781582827046173*^9}, 3.7815831017437215`*^9, {3.7815831639772563`*^9, 
   3.781583177069235*^9}, 3.7815832260810947`*^9, 3.781583270325718*^9, 
   3.781583338091074*^9, {3.7815833735871077`*^9, 3.7815834536548786`*^9}, {
   3.7815834848424435`*^9, 3.781583505670724*^9}, {3.7815836036535916`*^9, 
   3.7815836322092257`*^9}, 3.7815840448670406`*^9, 3.7815840775635843`*^9, 
   3.781584128938161*^9, 3.781584162260979*^9, {3.781584225626036*^9, 
   3.7815842457785325`*^9}, {3.7815843240816994`*^9, 3.781584343746163*^9}, 
   3.7815844154568424`*^9, {3.781584545289657*^9, 3.781584563076066*^9}, 
   3.781585565357504*^9, 3.781585642084241*^9, 3.7815857016099925`*^9, 
   3.7815858415128593`*^9, 3.7815859520341864`*^9, 3.781586019036909*^9, 
   3.781586161348837*^9, 3.7815862951857595`*^9, 3.7815863588546977`*^9, 
   3.781586390494068*^9, {3.7815866267009573`*^9, 3.781586676567557*^9}, 
   3.7815867336568213`*^9, 3.781586818745161*^9, 3.7815868865235662`*^9, 
   3.7815869292191076`*^9, {3.781587163343089*^9, 3.78158717797295*^9}, 
   3.781587320923749*^9, {3.781587386789511*^9, 3.781587412583506*^9}, 
   3.7815875168645964`*^9, 3.7815875546075726`*^9, 3.781587638717743*^9, 
   3.78158775572771*^9, 3.7815893627582693`*^9, 3.781589424397337*^9, 
   3.781589478961363*^9, 3.7815896334178405`*^9, 3.781786130703319*^9, 
   3.7820050069852743`*^9, {3.7820050597306356`*^9, 3.782005073883917*^9}, {
   3.782005108256641*^9, 3.782005142616005*^9}, {3.782005311149001*^9, 
   3.782005336183545*^9}, 3.7820053866047792`*^9, 3.78200542242358*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"6dcdb9bc-3f89-4a56-bebf-92ef48b1037a"],

Cell[BoxData[
 Graphics3DBox[{{{0, 0, 0}, {2000, 0, 0}, {2000, 2000, 0}, {0, 2000, 0}}, {{0,
      0, 0}, {0, 0, 2000}, {0, 2000, 2000}, {0, 2000, 0}}, {{0, 2000, 0}, {0, 
     2000, 2000}, {2000, 2000, 2000}, {2000, 2000, 0}}, {{0, 0, 2000}, {0, 
     2000, 2000}, {2000, 2000, 2000}, {2000, 0, 2000}}},
  ImageSize->{367.16565970114283`, 396.34323611782406`},
  ImageSizeRaw->Automatic,
  ViewPoint->{1.3696129914794049`, -2.336185313384985, 2.0288909372105577`},
  ViewVertical->{0.012903401252706939`, 9.846588238654994*^-6, 
   0.9999167476040974}]], "Output",
 CellChangeTimes->{{3.7815804917866473`*^9, 3.7815805183884654`*^9}, {
   3.78158056456894*^9, 3.7815806013355737`*^9}, 3.7815809770993795`*^9, {
   3.781581397081303*^9, 3.7815814501323967`*^9}, {3.781581528771199*^9, 
   3.781581551216161*^9}, {3.7815816557953496`*^9, 3.781581681995289*^9}, 
   3.7815817510708356`*^9, 3.781581782036991*^9, 3.7815818615960073`*^9, 
   3.78158190881868*^9, {3.7815819449311123`*^9, 3.781582019549465*^9}, {
   3.7815820561874514`*^9, 3.7815820832310753`*^9}, 3.7815821202225504`*^9, {
   3.781582187960082*^9, 3.781582205037383*^9}, 3.7815826004784946`*^9, {
   3.781582630788418*^9, 3.7815826386583853`*^9}, {3.781582711194624*^9, 
   3.7815827385529723`*^9}, 3.7815827697763996`*^9, {3.7815828174877443`*^9, 
   3.781582827046173*^9}, 3.7815831017437215`*^9, {3.7815831639772563`*^9, 
   3.781583177069235*^9}, 3.7815832260810947`*^9, 3.781583270325718*^9, 
   3.781583338091074*^9, {3.7815833735871077`*^9, 3.7815834536548786`*^9}, {
   3.7815834848424435`*^9, 3.781583505670724*^9}, {3.7815836036535916`*^9, 
   3.7815836322092257`*^9}, 3.7815840448670406`*^9, 3.7815840775635843`*^9, 
   3.781584128938161*^9, 3.781584162260979*^9, {3.781584225626036*^9, 
   3.7815842457785325`*^9}, {3.7815843240816994`*^9, 3.781584343746163*^9}, 
   3.7815844154568424`*^9, {3.781584545289657*^9, 3.781584563076066*^9}, 
   3.781585565357504*^9, 3.781585642084241*^9, 3.7815857016099925`*^9, 
   3.7815858415128593`*^9, 3.7815859520341864`*^9, 3.781586019036909*^9, 
   3.781586161348837*^9, 3.7815862951857595`*^9, 3.7815863588546977`*^9, 
   3.781586390494068*^9, {3.7815866267009573`*^9, 3.781586676567557*^9}, 
   3.7815867336568213`*^9, 3.781586818745161*^9, 3.7815868865235662`*^9, 
   3.7815869292191076`*^9, {3.781587163343089*^9, 3.78158717797295*^9}, 
   3.781587320923749*^9, {3.781587386789511*^9, 3.781587412583506*^9}, 
   3.7815875168645964`*^9, 3.7815875546075726`*^9, 3.781587638717743*^9, 
   3.78158775572771*^9, 3.7815893627582693`*^9, 3.781589424397337*^9, 
   3.781589478961363*^9, 3.7815896334178405`*^9, 3.781786130703319*^9, 
   3.7820050069852743`*^9, {3.7820050597306356`*^9, 3.782005073883917*^9}, {
   3.782005108256641*^9, 3.782005142616005*^9}, {3.782005311149001*^9, 
   3.782005336183545*^9}, 3.7820053866047792`*^9, 3.78200542246117*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"9dcdc2ba-bef4-43d8-a703-c3492da25ac3"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x$$ = -900, $CellContext`y$$ = -900, \
$CellContext`z$$ = -900, $CellContext`\[Alpha]$$ = -90, \
$CellContext`\[Theta]$$ = -90, $CellContext`\[Phi]$$ = -90, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`x$$], -900, 900}, {
      Hold[$CellContext`y$$], -900, 900}, {
      Hold[$CellContext`z$$], -900, 900}, {
      Hold[$CellContext`\[Theta]$$], -90, 90}, {
      Hold[$CellContext`\[Phi]$$], -90, 90}, {
      Hold[$CellContext`\[Alpha]$$], -90, 90}}, Typeset`size$$ = {
    360., {195., 201.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`x$5240$$ = 
    0, $CellContext`y$5241$$ = 0, $CellContext`z$5242$$ = 
    0, $CellContext`\[Theta]$5243$$ = 0, $CellContext`\[Phi]$5244$$ = 
    0, $CellContext`\[Alpha]$5245$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`x$$ = -900, $CellContext`y$$ = -900, \
$CellContext`z$$ = -900, $CellContext`\[Alpha]$$ = -90, \
$CellContext`\[Theta]$$ = -90, $CellContext`\[Phi]$$ = -90}, 
      "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$5240$$, 0], 
        Hold[$CellContext`y$$, $CellContext`y$5241$$, 0], 
        Hold[$CellContext`z$$, $CellContext`z$5242$$, 0], 
        Hold[$CellContext`\[Theta]$$, $CellContext`\[Theta]$5243$$, 0], 
        Hold[$CellContext`\[Phi]$$, $CellContext`\[Phi]$5244$$, 0], 
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$5245$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Graphics3D[{
         $CellContext`Workspace[2000, 2000, 2000], 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 1], Green, Thick, 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 2], Red, 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 3], Yellow, 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 4], Orange, 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 5], Black, 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 6], Blue, 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 7], Gray, 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 8], White, 
         Part[
          $CellContext`EndEffector[$CellContext`x$$, $CellContext`y$$, \
$CellContext`z$$, $CellContext`\[Theta]$$, $CellContext`\[Phi]$$, \
$CellContext`\[Alpha]$$, 2000, 2000, 2000], 9]}, Axes -> {True, True, True}], 
      "Specifications" :> {{$CellContext`x$$, -900, 900, AnimationRunning -> 
         False, AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}, {$CellContext`y$$, -900, 900, 
         AnimationRunning -> False, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}, {$CellContext`z$$, -900, 900, 
         AnimationRunning -> False, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}, {$CellContext`\[Theta]$$, -90, 90, 
         AnimationRunning -> False, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}, {$CellContext`\[Phi]$$, -90, 90, 
         AnimationRunning -> False, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}, {$CellContext`\[Alpha]$$, -90, 90, 
         AnimationRunning -> False, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{407., {290., 297.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7815804917866473`*^9, 3.7815805183884654`*^9}, {
   3.78158056456894*^9, 3.7815806013355737`*^9}, 3.7815809770993795`*^9, {
   3.781581397081303*^9, 3.7815814501323967`*^9}, {3.781581528771199*^9, 
   3.781581551216161*^9}, {3.7815816557953496`*^9, 3.781581681995289*^9}, 
   3.7815817510708356`*^9, 3.781581782036991*^9, 3.7815818615960073`*^9, 
   3.78158190881868*^9, {3.7815819449311123`*^9, 3.781582019549465*^9}, {
   3.7815820561874514`*^9, 3.7815820832310753`*^9}, 3.7815821202225504`*^9, {
   3.781582187960082*^9, 3.781582205037383*^9}, 3.7815826004784946`*^9, {
   3.781582630788418*^9, 3.7815826386583853`*^9}, {3.781582711194624*^9, 
   3.7815827385529723`*^9}, 3.7815827697763996`*^9, {3.7815828174877443`*^9, 
   3.781582827046173*^9}, 3.7815831017437215`*^9, {3.7815831639772563`*^9, 
   3.781583177069235*^9}, 3.7815832260810947`*^9, 3.781583270325718*^9, 
   3.781583338091074*^9, {3.7815833735871077`*^9, 3.7815834536548786`*^9}, {
   3.7815834848424435`*^9, 3.781583505670724*^9}, {3.7815836036535916`*^9, 
   3.7815836322092257`*^9}, 3.7815840448670406`*^9, 3.7815840775635843`*^9, 
   3.781584128938161*^9, 3.781584162260979*^9, {3.781584225626036*^9, 
   3.7815842457785325`*^9}, {3.7815843240816994`*^9, 3.781584343746163*^9}, 
   3.7815844154568424`*^9, {3.781584545289657*^9, 3.781584563076066*^9}, 
   3.781585565357504*^9, 3.781585642084241*^9, 3.7815857016099925`*^9, 
   3.7815858415128593`*^9, 3.7815859520341864`*^9, 3.781586019036909*^9, 
   3.781586161348837*^9, 3.7815862951857595`*^9, 3.7815863588546977`*^9, 
   3.781586390494068*^9, {3.7815866267009573`*^9, 3.781586676567557*^9}, 
   3.7815867336568213`*^9, 3.781586818745161*^9, 3.7815868865235662`*^9, 
   3.7815869292191076`*^9, {3.781587163343089*^9, 3.78158717797295*^9}, 
   3.781587320923749*^9, {3.781587386789511*^9, 3.781587412583506*^9}, 
   3.7815875168645964`*^9, 3.7815875546075726`*^9, 3.781587638717743*^9, 
   3.78158775572771*^9, 3.7815893627582693`*^9, 3.781589424397337*^9, 
   3.781589478961363*^9, 3.7815896334178405`*^9, 3.781786130703319*^9, 
   3.7820050069852743`*^9, {3.7820050597306356`*^9, 3.782005073883917*^9}, {
   3.782005108256641*^9, 3.782005142616005*^9}, {3.782005311149001*^9, 
   3.782005336183545*^9}, 3.7820053866047792`*^9, 3.782005422516017*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"54f2f69f-2b81-42ca-83f5-985883f71519"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.781584665900017*^9, 
  3.7815846755788956`*^9}},ExpressionUUID->"897c64b2-dcbe-4333-9e46-\
6b03aa81a75b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Workspace", "[", "]"}]], "Input",
 CellChangeTimes->{{3.7815772614338865`*^9, 3.781577261525666*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"c5a1a2f2-c44e-42f7-8473-f4bb06de672b"],

Cell[BoxData[
 RowBox[{"Workspace", "[", "]"}]], "Output",
 CellChangeTimes->{3.781577262344449*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"280262ac-996c-462b-ba3b-2b37a2da0928"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.7815785264231215`*^9},ExpressionUUID->"b5249e74-0104-4948-bef5-\
04493a03c107"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToBinaryArray", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.78157855675697*^9, 3.78157855723771*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"45488c99-cd94-4148-9f6f-4a1953521ae0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.7815785581243124`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"99cc0fbc-b73b-4db7-9943-4b343b8e5a7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics3D", "[", 
  RowBox[{
   RowBox[{"Sphere", "[", "]"}], ",", 
   RowBox[{"Axes", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True", ",", "True"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7815792031690617`*^9, 3.7815792301085515`*^9}, {
  3.78157927933785*^9, 3.78157929206979*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"5c914ec3-1e89-48a7-97bd-fd3832591152"],

Cell[BoxData[
 Graphics3DBox[SphereBox[{0, 0, 0}],
  Axes->{False, True, True},
  ImageSize->{335.7129412514153, 345.123325162823},
  ImageSizeRaw->Automatic,
  ViewPoint->{1.2271149198578533`, -2.943486549647439, 1.1314043952128112`},
  ViewVertical->{0.07796439958699466, -0.27907847383683015`, 
   0.957098092066819}]], "Output",
 CellChangeTimes->{
  3.781579204639129*^9, {3.781579281150967*^9, 3.78157929336829*^9}},
 CellLabel->
  "Out[128]=",ExpressionUUID->"2513d278-f55e-4866-ae16-7a63f8af0360"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"0", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"4", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"5", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"1", "+", "1"}], "]"}], "]"}]}], "}"}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"0", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"4", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"6", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"2", "+", "1"}], "]"}], "]"}]}], "}"}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"0", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"1", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"3", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"2", "+", "1"}], "]"}], "]"}]}], "}"}], ",", 
  "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"2", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"3", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"7", "+", "1"}], "]"}], "]"}], ",", 
    RowBox[{"vertices", "[", 
     RowBox[{"[", 
      RowBox[{"6", "+", "1"}], "]"}], "]"}]}], "}"}], ","}]], "Input",Expressi\
onUUID->"6046612a-9ed1-4bef-9c99-7d8ce4d44a6b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RotationMatrix", "[", 
   RowBox[{"\[Theta]", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.7815853746738725`*^9, 3.7815853746818323`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"0b202695-aaab-47e0-8f68-e5d5eef1bf4d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"Cos", "[", "\[Theta]", "]"}], 
      RowBox[{"-", 
       RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "0"},
     {
      RowBox[{"Sin", "[", "\[Theta]", "]"}], 
      RowBox[{"Cos", "[", "\[Theta]", "]"}], "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.781585377652857*^9},
 CellLabel->
  "Out[43]//MatrixForm=",ExpressionUUID->"15ca9c1e-0139-4341-a045-\
90ec63c3fd9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RotationMatrix", "[", 
   RowBox[{"0.5", ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}], ".", " ", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7815854737811155`*^9, 3.7815854919345236`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"037f97e8-d7f9-4b8f-a29d-020b3de369d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.08126851531803325`"}], ",", "2.2345906623849485`", ",", 
   "3.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.78158547845658*^9, 3.7815854922736473`*^9}},
 CellLabel->"Out[46]=",ExpressionUUID->"a6722baf-843d-4f66-8d6f-a26939e87316"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics3D", "[", 
  RowBox[{"Line", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2", ",", "1"}], "}"}]}], "}"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.78158724997755*^9, 3.781587250646736*^9}},
 CellLabel->
  "In[178]:=",ExpressionUUID->"46b0ce85-680a-45fe-9647-fea9f99c1447"],

Cell[BoxData[
 Graphics3DBox[Line3DBox[{{1, 1, -1}, {2, 2, 1}}],
  ImageSize->{257.67345099344465`, 428.49148462334176`},
  ImageSizeRaw->Automatic,
  ViewPoint->{0.6301252538595228, -2.6344896352971756`, 2.0279069322728365`},
  ViewVertical->{-0.18706132100270834`, -0.03048427068979883, 
   0.9954997201688749}]], "Output",
 CellChangeTimes->{3.781587251600209*^9},
 CellLabel->
  "Out[178]=",ExpressionUUID->"573b51d9-3088-49c6-80b6-6273300b4a6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Devices", "[", "]"}]], "Input",
 CellChangeTimes->{{3.7817551284206934`*^9, 3.7817551479334917`*^9}, {
  3.7817551779855146`*^9, 3.781755178218889*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"650f077d-2c33-41b7-a2a9-390a7e9d1bc4"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.781755180211559*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"7471e85b-4400-4fb4-bb0e-85cea1c22ea0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindDevices", "[", "]"}]], "Input",
 CellChangeTimes->{{3.781755490522291*^9, 3.7817555225430703`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"d7841be8-c81a-40b2-9781-c0bd75a86721"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1: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
MM7frP8LRW5zsn2bFYu5VJqzlKQrM+wZ79nu30ggmdkzKuYiZUhI7BEWlRtX
ryvKuFJVfkLYE7CsY8/0n2cFb2v9vXCoV+Q2J1jMnlM2Nq+hinWSUpjSLd7g
W/6NvLy/K86RYWh8AmYEsIOXroDBNARgDwa3OiWwkYylRhfPhNXrioY/r7Z3
KkZvRRlXqsZtwp54BreY5dWAn333FfFor8xtTraYfeHeDtmzA0SX9KklpVfj
PdsNsAdZzFXff87t3mJmJbe/SKocIXsV6jbtUWPPc/ldmbiTCXsCVh7Yw9bq
+teidflof7NF6vBZ3rQswUsge2WohNV7STZ6cLLNAHvA/BuRDYnOa9gxS865
/UVS5QiJPcIXSUXTnpea9ymGbln1etoyEwh7AlYe2AM6dfnCtbVzVS+5O15J
Z3oPWHVHF4W3SLqaHPzCDHse3R32NiKrYWd9pRwK003O7S+SKkdI7NHtVWjW
tIewJ+VWNtgzcTSvHurh1fje2XU89tS3vpb4VeDX8E1VIQApnQJ6McMeTA27
89Y9GOxJVSIoKUNCrkwhvMEUfQ7V2CPLT0jbalyEPQErD+wJHf9vvfPi4+/u
P56aGDn0QmyJPVU7NuA/7F/PLm0vC6TUirCHRJq2W5lC8Xl1r0JZ0x5hBlGC
IuwJWHlgz1jLSvU4/+2B9eyT9y81xOPqebL2/ctdVfhG0FVNLd5TI2yfTiLx
0lqZwrOJo3n/RoQ3pPOOhZgwBGEPyUwRYY9Zr0LCnpRbGWAPJsPBS2YIOHyi
W5/i7V2vw/a72xcgP++1LkzbI0NKs8xq2DHYk3PdsZCwhxSdkNgjfKN0jj1p
S1Eg7AlYGWDPN3XV6kE+0Kik9FUh6sUpmKtHl6xeat4n7J1OIslE2EMiTaOx
R/hdY+zJym1M2BOwrGMPZmWihwNBlrh9ZEGkK1MwVw8zvMPnibp8342biZxG
UkZF2EMiTRP2KEXYE7BMY8/j7+6H5jYEmrMxlb4qnPlobkSn1O/q0XX4OG+W
QipvhWa1qVPdmJ6qbxTejW53FYM9FOElmYmwRyHCnoBlGntCi9bBSv1F4Xd/
8YeoCrj8rh5dhw9MQPceTsZ8GknZFeYRCA37ytancLurhD2k6IRphknYQ8Ys
u9jz6O6wmasHBGghe8O1NN7Vo+vwcd4mjlTGIuwhkaZnliJldu7srsOFX7QX
V3r2T6f2wn2V7+uXNQYh7Kk0yy72fHtgvbGrJ7rbgHf16Dp8crT4NQmtSLFn
7NQv1aa1q4Q9pBgUaFECBn+j/gphT6VZRrEHU7SeHlcPM3wGtfNOcaRyVaTY
o1i9l5nWrhL2kGIQYQ8vwp6AZRR7MAUsfAEXU/yuHmZaSdStAxdjPqWkLIqw
h0Tyi7CHF2FPwLKIPZii9cDA7ikpV4/uUu+U20zCyEkBu+yJiB970tbnjZQ5
xYk9rMEsYU/mLHPYgylaH/7zVYf8Wnb4WERnclH+rdBpQmu1d8ptJoUq0r49
8WNP2uYLUub0p8HWwF16t+8N9VeMsYcWp8ioZQ57MJnMgbYknr4cn4j0ZJ75
aG7oTPH2rtfL+OqQYhZhD4nk1+SdM4G7NDT3nrCn0ixbEysmk/nWOy96K3AF
FJ2rhxnG4XNTZ8332Y3NFOoiKRS6Mkt02HP7yAKtXSXsIcUgA+x58+Mjshty
TuMexfhM2JNRyxb2jGxbqDuke4ra1cOsu31BKPZoFbOv6j0R80kmZUgGzDPM
NXYQ3ngA5+rbWLeAvfnsecIeUtQywB5Fh+e5u9sUg/P81v3Cb+X7+uM5WKQI
ewKWIezBFK3Iitan5eUqbm1ewxqMw0dr5Xdq40OSyQx7/JlvMAKY3cm62INZ
PoCwh2QpHntC3ZLG2AP/KvyWrC9iUiLsCVhWsGdq+LLueO6XbGyPwjAOnzMf
zcXnNj/f0h7z2SZlQpiYb7awZ7RUcn2SSBUn3SQ0xZ05v3W/YmSWYc+6o+Le
KUmJsCdgWcEeTA7DWMtK2deBHGI7pVU7NmAcPlq5zbREKYnXw4FeM+x5/N19
byOtAxeFt9ySnSvUN/D4H9/T2lsM9rg+Q6RKlC72KLLOXm3vVAzLzzQ0ZeJO
JuwJWCawBxPeUmQyywb26Ky+9TUM+eBzm7NypUhxyqxXIZh/I7IhUd178yai
HUpAocyTtsmClFHx9+qjknhqYFJgT3WHKjVCgT2p8lsS9mRuMkWGtx6cbBN+
Pbr+hAoDngltXXhTM7eZqrpIAY21rDRgnm/qqv0bWdV7Qni/bdmzWH33/mmw
VWtvQ5nnzY+PuDw7pErV2KlfBu7VyTtnFJ8/d2tEcVuqh+VMZKkR9gQs/diD
CW8FRnK/krrioS/LzPALdeWoqov05zKrXkeuTBGaoqaeSgIqTU2FYk/aEkFJ
GRWPPQ9vHld8HhBFcVs+UZdXjMlLOovCb6Wqhp2wJ2Apx57xnu2YkXxq+LLw
6/EUrQvtydr3Md0Ltfo2g/VcvRbzJSClVmYRrkCHh9mNzcI77fiBH6lv3anx
S/hdVc8shD0kh7p3dp1WQFbN5F7Hwie31z77XjAtQda6p/ns+diON1nxkOnE
dCsmykbIQhVZo57puIrWZYbsXtjc9hP8NmmtLhKTcRkXpmlPznWLZgz2VM5M
QYpU/LJcoen3/N34zr6mba2/3/f7v2vb8vOu373Cnp3NG34eeExeat4nvJk3
f1IpnnnCHod6/N19THNC+Iy/LMWvnqvXEmQeZphi9puabXyA5WK+FqQUyjif
GVO9HtqrMIoWzamKC5Cyq9JXBd05tLFz1we7/zNAzj+/t/jsu6/Inh3gn8CT
Mqdxj+x+judgExdhj0Mh0zVljXruPZyUee/jNGQxu1YbnxzVs5NMV+Ma/vMy
LlmRo/OmPbT8Oik2ITsWlvqL8BBhXq79FnhSnt7RmIms5uhE2ONKD062Ye7A
8Z7tsi2kJ4krtCKGGXxMa7MpT8oiRS0z5kGWcYUm5EfRtKdCpglS1Ho8NcHf
sfzHzF4c+PSeCsd4wh4nQlasK8Jb52/fSZx2PHuy9n1MMftNzVAXJflUsowb
FQbeFGTJb6GNp3Sr1zd/ciIUe1LV6oSUaY0ceiFwx/KFh2Zh4iWbfh14WGRZ
zWlbmSsiEfbYC5nSMyyv3ppOOpOZN2Rus25VFyX5VKyQFY68IfOZQ8u4tKrX
p6lXISle8XNx6atC4DNm7w58VrNsiYoK6UNF2GMvZEqPonqrvv9c4pzDGzK3
WauqK0dJPpUq3YQEz/ydzBVO0dAbVWtvh8YnQpmncipfSDFo/I/vBe5YvoYd
GVYIGJ/V/Fx+l+yuhjs/kcOPU4Q9lkKm9CiaE345PhF/T2aMIfs2gy3Kv6W1
ZerkU2kyG66HZ+LC/u3IXhBC85l1y7jUXXCZUdMekkP9abAVM42aPUeB52VW
bUMlFycS9tgIOZjfeudFRXiruhDSSzxBQ/ZtBjrSWqsLMA9e2+O8UqRkZRzh
+vbAev92ZA9L6I167+w6rR2m6nVSzOKLuUYOvcB/zCyred7WtYFHprqjq2J9
mIQ9xnr83X3gGcwtJ1t7azodjXrUFpoywUxrrS6w51vaKb25cmQc4Xo40Ovf
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
                "], {{0, 0}, {765, 324}}, {0, 255}, ColorFunction -> 
                RGBColor], ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0, 765}, {0, 324}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Arduino\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected (/dev/ttyACM0)", 
                    "Not connected (/dev/ttyACM0)"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"Arduino", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$ = 1, 
                    Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm], 
                    ImageSizeCache -> {149., {4., 10.}}], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[
               RasterBox[CompressedData["
1:eJztvXtsVVee73lmRkLzRxRF0fyTP6JwpaK7JU/VhEipFCohcsPUNDeTUlkX
FVKlUA1t0UOlSKe4BKgmhOYVceMbC5f7CMcCbJfB4Ljtc4wIVzzaUYAQmVg0
TFk8r2ESB4MJNsGGOsGyQJ5fe03vu2uvx/6tx36d8/vqp4jAOfvs51qf/Xut
f1fz2//4f/+PuVzu7f8Z/vMf/+Z3/3716r9Zv/gp+J+fv/X2Gyve+tvl/+Gt
NX+74m9X/6jmf4K//N//h1zuMXz+X/88TSKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCRScnp0
d/jBybbRnb+69c6Lw//przyD/4W/nDianxq+jN/aw4Hebw+s/6aumt8U/Ar8
lvrrk4NfwC96Fvp5zLf8/wSfRB6I/1ul/mLoDoz3bIdj9B81GJwHOBtwTkJ/
Dn5Caz/hZPo/LzxXgdOia6H7LNt5re8KBccS2CD+wpFIJBKJJBRMLmMtKwMz
tdBGti2Eqefxd/cVW4OJCT4WuinAAMV24Ff8H0ZOdupv+f8JPyP7vwU8I/sY
MGGA8WQnUA0/AWRS7yccIP8T/LkKnBZdQ54ofue1vos8QHuUIpFC9enQDc/q
+89t+qwPafBh/3eTPg4SiSQQvKEH3DsYYpFt7cHJNvx2gAFkHqRsYQ+cQ60T
ON6zXfZzWtgjBC3CHhIpVF+OTwCWtA5cBFZZ1Xvi5f1dYLn/XB+Rse0vO3wM
fg5+FH4adiDpc0AiVaJ052tmsliPwdaAuIQBrAxhD5CbwTmU7QAee2Rnm7CH
RAro/O07PVevAXJUFw4939IeHd7oGuwM4JDHQkmfJxKpzAXztczPw5JwmPER
K2FwCuhFvSlZDEjIEhnCHn6u9z4sO4HMhLyHxB64BLJrR9hDIrHg1LLDx1IF
ORib3dgMbAYgBIdw7+Fk0ieSRFIJZjGWO/rtgfVs/E/5EC2crwFO+HkTJtlS
f5F9Hj4g3BocNQ88Ab8QbEc4BfPuo6xgj9DVw6ctwZ7w1CeMFSKxR0Ey/Lli
d2bA+HAk7A//Ma0UYsIeUlICQui5eo2FqxJHF7cUBPDWOnDx/O07SZ9jEulf
Z5OHA70wDvPVT8wUKRyJS5gNO9ayMvRbwgiX0NUjy9vhJ9yRbQsDn8kK9vD4
Icv/4f0z8L/8xzDYA2dbkY6FPFdREAVhDylmMdTJnEvHzJ6qb6wuHKrvP0d5
QaQ4xV6TAQ8wacCKwp/EJXTOqEu0FBK6DhSf5+M+AUbKCvbwE72iUIs/5zwZ
YrCH3w5hD6lydP72HZj6y8yro2vMCwTUR4EwUhSCuYk1tAnlnIDxToz0iMc2
OEbjrfH17+oybd5JEpjOsoI9fOhKsSk4J6GIEoo9QjcdYQ+p7AW0s6r3BEz3
iSNH2qy6cKh14CK5gEiWYtks8FqtW9ztdtiPSMKMFGNXz7QIokJ7+wQ+HyCK
rGBP4ChkiU9M/FHzqBmKPaH4TdhDKicB7Sw7fIxoB2PPt7RTCIykK9apGNN3
DmlanY1jE+92UM/XodLlPYCiwOcDiS4KgAkUbvtzjcywB3bGH3QL+Oi0sEcd
1sRM4mrs4YvWedIg7CGVgci3Y8k/rQMXKf5FUsg57ejOQTGLjzGFJjMrxPuO
MNE9NSkpACaQF+T/LTPs4c+GH6XSgz0BPGPHzm+znLBHiHmW2ySlWTBT1/ef
SzZF+ekdjc80NIHNadwzd3eb3xbu7Xi1vTNg8JeBj8EX2RZgU8nyT3XhUM/V
a0lfVVKKFB3tOJxKolBoao2WQiNWQplhj7BHn0cpBtgjbIDjR6n0YA9/1R4O
9JYx9vCYp3WApGzp06Ebyw4fi40HnqjLA5ZUNbV4MLOks1hTPBSRwcY9QIIf
jZmInqpvXNV7goJfFS6YKJGrUFlaOmvY04k9/ulMBjDCedCjFAPskTXA8VAq
JdjD4xn7rTLGHtmlIYdPOenew8nWgYtRB7MY5HiEEx3e4C1f3Hiz8L3jB37U
3b7g7V2vL8q/VbVjQ9T88/L+LjjbSV9zUqx6dHcYOMQyS1nL0jlEZxR7FAt+
MUrRxR5Fr2PvEFKCPbLi93LFHsWlwR8jKc36cnxiVe+Jp+ojcXrMqm14Lr8L
OAcgZ2n3wcQhh7f24krAHt6AgrbsWbxk54roKAggc9NnfZT5U/bymgxHamwh
BiArmKBhZLapjYpU6cQe/2INPMCo50Hm8NHFnsDnA9tnX08D9vDZU15bpHLF
HvWCGmluDUEKFSvOisKlM6dxz/zW/ZGGq1xZb6FaiD1+u9xVxXxB8xrWRME/
cBUo8lV+YqshyBZFcmIw1MNPPBzoFS6xlE7xc4pNMI6flDF1YfyZVOwhW/Uj
MO8HHCBAtlrYE+Ao+HPgQBjDpAF7An/pbyxZltjDN/3mlzaTrYdLSrM+Hbrh
ts0g8+q81LwvE6jjt9OFRaHYwzuCljctc+4Fqi4colVQy0Mwcqqb2RobTDpj
LSsfnGxLZ3E6RnwBu2UwTs0wBl8JAAzscMAVA9c3MDnCtKiFPYEPs0k/cM8E
2CAR7OEvlv9bZYk9/JPLVkUJXG7LvSXFKbfA80RdvqqpZeHejsTpxdh0mcdv
Zz6aW9/62qL8W0/Wvu/qlMLVIfjJrmCEdA48ZYA6fvH+GeH6UHghV2n3xL/O
B2axAJME5lPPNxW40IHdUGBPIMXL858Edizwu4lgj6JgX7jNrGOP0NXD/okc
PlmUQ+BhtFPd0ZU4tFjab4qdNtjjt+a2nyzZucIV/xD8ZE4wkrtN4IFhFubH
qPMnr4yOeXZ66OuDl67IzOGP8qCiXk5CLb4sTn3SQt1NitQOf4hHK/FVcaH9
M76CmePHHv7oApep/LBH0YAxkNNODp+U68vxierCIaId3rYV611hTxT8Q/CT
CbkFnm/qqmGAdZirMzQ+AUhzfPA6oEu+r7/21OdgBg+Lq/2ZFk3uNnEuvsZK
nSwE/6qecxXYg/8kEnsCa7AKV5NPCntCt19m2KNOj+cplxw+6dS9h5P2Scuz
ahvmNO5JSb25W2PV6xEZ8M+i/FtO4Of87TtJ30okgRwCjyva8Zw2wDbrjvY6
fFicnDEm4eQeuhqpzCPEb02xnrvQRaNegV2xWYXDB4k9/FHLHD6JYw8fYy0z
7AldayNwY5DDJ4Xa9FmfZVn60zsa57fuT2fhuROTVa87tMtdVVv2LH62bqsl
/FC1V6oEU62TloMskmVDO8yT03z2/OZPTkT6sDg8e9OSyV0298HsA1iogBl+
a/B5/sPwN3xbbH7ykmGPcPdkH8Zgj3DelDl8ksUer2hdvc3sYg8m055fzS2d
jdArUz1Xr1k2HpzTuKecglkyw1Svu7Lu9gVLdq6whB/q85O4YOhzkrQMGzFL
aClNTZ27NdIxcMEsVpUS7JH5SRgHlvqLMDM+ONkGf/YnAsnCCkJUgO0HNiX8
RX6bQpKRQZfsQDDYIzsc4Q2WIPbIjh2DPaxpVcCE8Ml/jD8i4daY8VdB9knh
aefzzYQIF7g0ChQnxaYvxyds8pZn1TbM3d1Wxu6dgBlUr9s7f97e9bqN8+ep
+kbq8JyUYKawbLMMoytMwQZD5ZXRsYOXrkTt0okNe6ZFk2aoKXryqFvMyUyI
CsJNKRI5hJ8PxR5FiERIcQlij8ILF4oKZtfFM7dbkx0OftVR/tKQwydZ2US1
nqjLz2/dnziHeFbd0cUWGPXWFWVLaCGNLfLFjG1H6LyKmXn8Vt/6mk3zw+db
2inbOU49HOi1bDwIA6mue6c0NXV66Ot8X/+bHx9J/JGM4qzCLKmLkYoqfl0v
nDAQNi2aW9VZHEKHTyj2qBNi+bzrpLBHcezlgT3CVUcV0Tpy+KREMAMar5ae
LPAs7T4ITPJS8z7gE0YslmGgUGO/woiou33BmY/mJgg/sAM28LOq9wTFvKIW
vN9Z5i3DOKmVvTNaKh0fvB5zDCsR7NE9vTA9qbNHFCtn8ZAgm634uTW0Zof/
ihp7QltJy1b/VGwzIuxRsHp5YA+/TfszSYpUMOvB3Jch4Knu6IIfZa6bWbUN
UUMO0oA9luxcsWXPYuCQy11VMcPP8QM/Mk77oZhXdGKrSxiPrjBtsWUIkD/H
fDsJhrESwR4m1uZR4fkZa1mJrBdmLbLVm1Kzk0HBDk8pauzBpP7yXRMDH4gB
e3S3mTnswXjqeCkW7CBFrfO375ilLscJPEu7Dy7c28GcOYnjDdKqdmxgFARA
Ehv8nPlorjH8vLy/i+q83AqGPuOoli7wnLs1ku/rTxxsFFZ76vNIz7anqeHL
bA0sZg8Heo0bNsKm4OtONkUikdKgTZ/1pRZ4GOpUNbU8vSOShd3jtCdr31+U
fys2BAL4Mev281R9Y33/uaTvynIQ4IpxcboW8IyWSh0DF9KQt5Me7CGRSCRe
8F5vkMkTQ5XWks7iS837MuTVMUCgJTtX1Le+FnUgzDjnh9w+luLXnYwCeE4P
fZ221B3CHhKJlE61Dlw0KNea07gnurXRqzu6qppanqjLx8MesxubYXIXmmW3
Ii0DLNmyZ3GkGdEAPwal7uT2MZOxkwcPPKWpqYOXrrhtnkzYQyKRylVmK008
vaMxonUloqAdhjRwmJs+64O5+9OhG2DGSzPAF9kWYFOwQdgsbNy45E1mVTs2
RMo/sHGDFb7I7aMlYycPskprtFRqPns+E/Eswh4SiZQGwQyuO1/Pqm14qXmf
8wFwafdB2KyTpB2PcGzYxkwAQm7hJzfj/4ko/gXbXN60THd/nqpv7Ll6Lc6z
mkUZd10e3fkrRQ8ZT0PjEwA8iXMLYQ+JRMqQDAJbz+V3OY9qLdzbAZu1AQMg
t1W9J+BwEl9b0ywhHGMs/6e7fYFz+Dl+4EcGCT8AltTbRybgFoNyLfgKpvHg
ldGxbCXwEPaQSKQ0SLctz6zaBuAThyMec+8YB7Ne3t/F/DlJn8g/U3XhUETY
49mzdVu37Fns3PlT3/qabsxrdmNz4pyZQpn1AMGk8QyNT5QN8BD2kEik2AQv
6boLbD2X3+WwVmtJZ3FO4x6DpoIwzwKtpTnCYrNymZYx54/bzB9AKYMOP5Tn
7Am4xaDxMnwlNI2H5fAkTilqgAHrGLhw8NIVsCujY57Fc/JJJBJJKN1kHrdO
nlfbOwF4dCdW2GGYWzORSRsP8/htXsMat5Evgzqv6sIhCngZrAMFnw9tEVya
mkob8LCO6HN3t8HbEFENiURKsz4duqGVzPNMQ5OrTB4AHt3GOxmiHSaY+uPH
HmZVOzbUt76WYKozXKxKDngZBLbGWlaqo1qsLD0NVVpseTt4YeErDir5opNI
pJSrdeCi1kQGb3OJAM/sxuZNn/VliHY8AVUmhT3Mnq3b6hB+dN0+lbmMl0Fg
69Y7L4amLp+7NZJgHx6vHXrok5u25DoSiURi0qowmlXb4KQnz5LOolaJ1rLD
xzI9iuqCZfrhx8Dts6r3RNLXIT4ZVGyFOnlGS6Wk8pbhqYeXHa0mEjCwxHa2
dTXx7djZ0//86eHOzt11nn3ee2jw4vnJhyXMFuBjX1+/4jfYpuVefXPr68A2
kQZfDN2a8DN+wf4HNos8FQ4FO8lfl4P7dmpdGl5wLLAF2E5gm6HnRL2fR7pa
/fsJu33hXz5H3gb8tdb6sPrz/K7CwQYM/jL08PmbHG/x3zwyPZ6amBq/5P8b
rW6E8H5nn70MW8Dn8DD3Thkkh0RXvW4GP81tP3ECP7AdrSKvNOecO1Spv6iV
zBPq5GFRrfgdO/Nb95uVGPCUCyPP5J0zD28ev3+pgdm9s+vGTv0y1Mb/+B58
0dWlgQEZZqi69X+rMJjOQicv2E7gWzCVWO5b6I7JDL4YujXhZzzBJJXf8tvA
ZvFzq6XgbAMz7Povfx96pHBptPYKLgp/XH6DHwVWwW8QPhy6n3CqQ3eSv9ay
T8LJEZ4HJ7sKJwfOvOxu529yvMV286gFzHOn96cjh17wyEeLeZwEtmAjyCH0
5f1d5RQWiaF6XddcJTxf7qpC9vaB+y3p6xCHxnu2uy3XujI6FmdUi9GOZb8s
sPm7fs+4xf4eA0ZycmlghEcO2jAdDF48r9hUmWEP7HxSMxf+ongGXwndLEzl
e/9xK3KD8EmMdwJgw9VO4rGH/yTcnGos/+bW1/hjZyZkv6xjD2MeNoYA+dy5
fR5fT+2kYuvV9k5kHx7YsUzHs4SKrXpd1xbl33JS6v72rtfVP/R8S3vSFyFy
GayxNXE0r9hgaWoq39cfG/DYdwf127N1W514FF1hj9acpZgLmMoJe2AOFbpE
4pm5ME4e3tTuDqHzSm2h5GNw/yjIB4k9QvBQ32nAPLrHLrvVM409fubx3tCr
dmzAjF3AKtUdXTZjKT6NZ9nhY+Va/ZE43qgNoMW+yeHxAz+S5Tk/Vd9YBpFK
tR7dHf6mrhoPPCPbFqpXmjh3aySeWi14QquaWswiWWpLD/YMXjxvMHTD9CHL
fygn7JFN6PHMXGdP/7PZUcMXZds0O5OKU2R2/yjOIRJ7hK4eBZ4Z8B4z4Taz
iz088zCDd/zQrIyndzRaJvO81LwPM5yW9yqWCVav481Jwo8s4HVs7Y/He7Yn
fR0iFACMVjKPOns5NifP/Nb9ur0jtAxIOA3YI5wL4G9g3vSCBYA3wjwQ2VQY
D/bwmahCE76qI7FHMbXFM3MFclf2/uNWuC7+n2b558IrKNwgnA0h0nhJ0fBf
+LMQjWT+PT5mBL8OZ967f2Cbwlwa2WnHYI/w0ihgb1pCsCyBxw/w8GfY24P7
dnrnXLg1fgdg+8h70j7D31gy5vFezxXkM6dxj+UrJGZELcuQVkCJV6/jDaDF
PuYVCHjVr/+Zl8QSushCFqW7lvqDk22KrcXg5IF3GXyWnY256pZpiT28P0GW
HSEMEAhn/3iwx+HW8PNv/C/sDCqAGRS/iL80PKLIImI8JMA+8B8TJhULfxrg
hycfocMQc635zwh3T72fcDYUBAL/xEhG+K/8TZ546CpUauZRk09VU0vUTp7Z
jc0VUteTkup1vAG3WM5TXoXX8o01/hn/m7rq0NUWsqVSf1GrYmty8Avppqam
OgYuRAo8bPGXDN1ITrCHnwcVSTs8IwknzfLAHqFjJP45jhWDhyYV8+eHd30A
Y/CIq9gyTyl8Kjt/lhSZRfyHhf6Z0GstdPWoi854igtNflYri9iDrKHgyWd+
6/6onTwvNKc0wfX87TufDt0A2/RZn2fVhUMv7+8S2rLDx7yP1fefY98NBOxS
Vb2OtKodGywjFPD15bV/I5z61TktGZJW0RYgn8LZNTQ+sfmTE9EBz6vtnQ7T
lZG2vGlZ4tgDUx4/F9h/vgywR+iaSPMcJwwCBj7DU6u6ogqDNHyZmwI/+PtH
uAOh15r/gLoWD8R7wyzvycxhz72z67RmKI98bJhn4d6OUCfPE3V5VheW+JI9
wCetAxc9qnE+5j9V3wibhY1rrXSWKrN9W+/83vB7fykkn9AFp9Kvbw+sxzMP
fFixqeOD16MLbBks/uLK5jWsSRx7+KE7dPrgZxx+tBdu1qwpnOJ3TQ5YsjX+
qIVF6/g5Do7L36xPaJhKc6R4N06dyJHi5at4pm5EwAeG+EQX/kSpzwzmflNf
a6GrJ/Ry8F+xTLDJFvZoMY9HPv9L3QfGHZiXdh+samoJHQbn7m7zcqTXHQ1p
wu9czIcDHDK7sTlxosiK2bt9hj/4CyEJZJd8Hn93X4t5FEcaafZygsDDLFDD
fqf3p6yTj9exEGzyzhmZeb0NbdoV8nNW6Csw/xV+etUqcmHprwZBHOOj5rcW
mHz5onUM7OmegVDCREpWlM3voe5RTHOUwp92/n5QX0pMeFHozPEMnxrtiXdb
yRKV8coQ9pS+KhjMTdcL33+zyzCfZ0lnMbRrPXyAL4SHl9xIT8W9h5M9V6+t
6j2RXX9LSszW7fOhmHzUPpB0CpgHX6iuTuaJLrAVcw4Pb/DEwfsFvGUAugC0
PJ5KrE7TCfbwXzGo7VWUwzPFiT18HojuHBcP9rCcW9n55D8fyjC8+NMeuEz8
/aC1QST2qO3gvp1q1uJ3EtPJWa2sYI8x82wofmg2wGICW7IOz29+fATedp2f
hPO379T3n0tth8CMmm2RV8uc4bWZJx8t5oFPKrKYTg99HUVgC+l3dW7AOfB+
0TpwMW2tt/hJMxR7+BdnmHQCnzFuaaKYOMwK2JGdYfyTLx8QYVNkerCH1YOr
Ww0LU4WdYE/gwNOAPXVh2GyA96EyLmC3/F0tTY1fGjn0QpzMAzyjHgyFTh6/
NZ9VBV61BOMtDLwUwIrOnqx936q3z945w+vF5JOJwnZd5lEcVEQVW8g2Wa4M
3iw2fdaX8gYU/PyiTvaYxqUDGWOPorDIrMmebJZRTL6Bf/LqfbSwJ6LcHube
Ce25J3NllDH21Ckrs/ikpiiwB2mWv4vX46mJOJkHXipDC0OQy3gN2TUqJNqJ
2ZY3LTNv6dz5veF3BUnOakhIg7SYRwFypampKFZRxy/+YmnwoMHjlqHWEwbJ
HmbYw1bJ9NuFf/lcOLshQSUi7OEbDntb0D1RbgU0iFwAQhG+yS72+HFR4ebC
918qe+zBtOhxyDyhyTwwAuOzo2EWMDjkew8n6/vPUdJOIla1Y4N5wCuD5KPL
PLLtAOE7X1QU8wJib/CgweOWxVbq/HQQuuK2GfbIZhlhNxXkrkaBPYF0Wfhf
z/uUIPYgV5KCvVU767KLPfxnYDeE/CMMdRkEc0OVcuwxKN0CM2Oe6o4utSMd
BmHdJS26Ll/FH+z523e01o6vZFuyc8Wi/FtRbNky4DX8fmbIR4t5FB2Yo2i/
HHVUK7u048kg54H3h9hgj3BpDGTnXufYw58NP0UkhT2ytVD9BgAQyqvT5YU9
05LeSsLQYTy5PenBnj8NthrMO/niRoNhNjSBGcZhXYh6pqFpdmMzZqnK1oGL
lKiMNyATFo3qbl+AXHlW12wqvDJBPlrMoyhUPz543S3wIPuCmtlT9Y2rek+k
LTnZTLFVcik2i8wvEs6/oSZL9uAnXx7AAjNyUtij4D1+PSm1eEgw6BuQHuyZ
FiXYCzcYTyUXWy4t1Cx/N1RT45diY575rfsVQyXgkFbbn0DJyabP+hSHCcBD
2Tu6tmXPYv9Fr299LXTxWQOb17DGONUn5eTjinmaz57PipMHXivgWYviZF4Z
HQMD/Dt46QpYvq+/9tTnnnmH5ryLKT9rhObZOsce+EXMh6MuYOfjIAGcSAR7
hCtJ1c3EszDunYAMUrl4R1OAlJLFHv5OEzbkQX5MS+ksYH88NXH7iPZif+3F
lc6ZR3et9oV7OwIZmPCCyfvS7z2cBBwi4DGwQKc4ZsAny5uWOf8tq5aG9YKW
PmkgHzzzKJrzOO9GGJ2TZ9nhY66CWaOlEtALsA3wHiCNVmjPOfbwxdqhVdWY
Tr9a2IOssokUe3g3CO8NSGSOE64LZuyp4AlTzU78WhL8aU8b9gg/LDyQsuzS
fLfvDd1Z5nDhFwaD7b/f+5FiwJzTuAfPPIoMzOrCnw0FiXh42IoSYKt6TwRW
2pIZfIB9Er7CvgsbiXm3eVMsfg2IMq9hjdufe7L2ffPltkXNDJMlHy3mkTXn
AeZx240wCicP3Ktw62JCzArBkTLO0YWcGLBnGvE6H/p5fvrQwh4+MRUZ5DI7
XtnW/Caso09kjuOhwsZNwedlqQkKk8eVNuyRcTt/m5XfmlwGKT2nC4sMBqLT
Q1+fv31HNpUjq9SZhaYGsR4gPVevxQM83lqi8LvOMxng3ZlBEcOhOFkIsxbS
lj2Lnce86ltfKwPyccI8o6WSQ+aJolwLHjF4s7ABnnO3RjoGLrhFuyiwhw/u
KDwA/Dy467/8Pf8xPPYIgzjC6SNO7BHubUqwBxOFlP0Tn7+kXoEd44hLFnt4
/5UMe3i/WWhj8OmZMyb7p7Rhj0FKz9nCgt8UtZfcAuZhvygkH/y6pcjmsc+3
tEeatAzbB85JqpcsgBAQHVBW1InZyOpy+JjzOq8lO1dkmnycMM/Q+ITDoq1X
2zvdOnkY8JidH8C544PXo2g9FB328KO3bDrAF84gsQc2yL+D4wvYbY5agT1C
kJtOCHuEnCmbi72absVszlMu32SbSRhf4z17CWIPHK/Wuur83asgHzjJcG8r
fGupwh6DlB6zFj0e8zDBUOmNnDAOs4XUMVbd0RW6aFd0BoM8oA7whqUn37nY
0qjOEejZuq1amTbNbT9x6/YB8jFMck4B+SDXGFUwz7TTJsyhjdC1jIW0DE4L
o52IVhCLGnumRbMMWx7UmxHgD2dP/7OwjFqYIIFZgV3WbVgWdjFbnAJM6LxS
YI+s9U0ic5ywwJ/lM3tnHq5OoPejcGUKJqF7Db4LR802CL8IhyZsjYgsklIf
kRn28JdV1rRQgXw8Q3q3HBwyg0n4L3zMf3PKNmi8OAWYZVoRr/E/vqc7oXxQ
3K47/gjXCWXkA8yjXnLCb/Nb98fZMN+zDLUcYUumAps5DIRpsQd80m22T9WO
DVkkHyfMw2TvD1nafdBh9rJZDk9stBM19mA6wwhN9mZtszgFsuQcb1rLHygy
uhPBnmkRV4SaOv/HYIMKAEjP4hTqy8fEB8VCTcbhxje585tn8s4Z3anEoHRL
sVTWzn/5f/DME/8y0BmiHaE+Hbrhin+erH3/w06NkJPbbB+35BPDiqXjPdtd
Mc+0dT4zPGIOF5swqNI6d2vEbQ1astgzLYloGM+txjOCIq0oHuxR+AoinbnU
Qi5L4Td1XrrBBmWXJj3Yo85TMj522WZTgj0G4a3eQrVD5sEP5vCuGmdga3Zj
M7zMZpd2eDH/j805eaahCS7E6uIfThcWIe+W4wd+5LCxIUCUWWG7sJ9PpORT
6i86ZJ7pGQ/eD//QgX9B8Ju6WYSWwVuA1lKho6XSwUtXnK+gkQbsmZ4JAeB9
Pgf37dTK9sRMLuqFFWLAHnVZU3QzF0a6borQZF2t2V+BoynBHtZwEnMmQbKI
rdbJTAn26Ia3LhZ+qJvG7IR5QhewcGjVhUMZWhhRVzB7Ghfy++fcD4rbrxe+
j7xtHPb2yQT5OGee87fvsNXitMLBzFw5SJ+qb6zvP4c/CUPjE87bKqYNe6b/
bYFv9YiNaZSnNSPs/cetMHUatAvGT4iYrYX6CqKbuZCCXww9CXB1AJCQqSOY
DcL9oN5a4tgDBK4GZqHgoOBEYdayx+f2xI89BuEt3TRmoBpgG+Gv45knnmQe
GNUdNlhLv1jwC39+YPYMXBcA4O5CDfLOcZjn7JZ8FM2QzQQkAzyDwZ6HA72Y
DQZqHvGdPB0m88C7AP7RANKIrjIrbdjDBLM/gA1MZ/5lr2GOgHdk5DoILC0W
Y/g3dPhp5DYDJtxnfmuhh2a8524F8zV/deB/8VcnIJavDvO7tzUACdggsATm
GGF/tBZfCJx55NXBX1ldwXZYgr13+CwzOfRA8De5zW2vkEF4a3dxjdaAs+5o
rxPmiQF47BusZVQwl63qPRGa+QPYKZtqtxXrLxZ+iLl/znw011XAK7Xkg2ce
5I8K+zxgyMdVtSP8Ot75mQjwsNUo8n39bJUKZqeHvmarV8iGIBKJVGm6f6lB
a77Q7Uz45sdHhiSvh3jmiTqBuZKBxy+2ZocCftQ9JPFun8tdVUt2rnBFPiZt
nDu/N/yugHyQwSa18C16bJgHQz6uOvNUFw4hn454gAfGjeaz54Fqzt0aiceN
QyKRykO6zQmvF76vm9IjG5RSwjwEPLxk8PNEXR5zvfBun/rW11xdR5M2ziLy
wafZKDS681cY5pk4msdsTcE8HvkIL4QTByneyRMp8Kw72gucc3zwOkEOiUSy
0dipX2rNFLpdeoQtepiQWY6RMk9F5fDoiocffBtJYOPDhV9g7qju9gWuUn0M
yWdtkEZGti20aeaDbNGDTKIOZR5mfMLVS8377E8p0skzWipFUZPOUOf00New
fePLQSKRSJ5KXxW05gjdinVF6VbizKNbfluxglmPJTyzonUtQxZ5uUr1Mczz
2TuHJ59v6qrNTheydGusZSVma0jm4cnHyYODKdcqTU0dvHTFLe1s/uQEbFMW
GSeRSCQz6WYy64a3FKVb8PqWIPPolt+Spmfm3w8+/8JgCltd/MPZQvhtdrmr
yskaXobk0zLHSUn75OAXGOZBtoYG4GS16nhj5GP/4MDvYpaWO3drxOECYTBi
HB+8To4dEokUkXQzmbXCW4o05iujYwkyj1b5LSkguKZmyRvIPGcnSc6G5CNq
4IzMvWF6dHcYU7qFjKAZMA8z+w7MmMAWwImrNB4YKzoGLpBvh0QiRapHpeGR
Qy9EF94KrDTqCbl+dBTMo1V+S1IILq7BO36+uBET8NqyZ3FS5DP8gYB8kB11
kKVbyHxpY+axN4wj1FVUC8BJNlCQSCSSW907u04rvLW6+Af8aCZL6UGWbkXB
PC/v7yInj0PBpTRYCnxD8UNMwMtJeZch+bxnWNiFTGOeHPwCc3oTYR54LwgN
bMFri5PFQ2GIoGAWiUSKTY9Kw1pzgVZzQkVnQkytx9zdbc7H802f9cV8hitE
V0bHdJdY+k2xE7OMl5PyrmfrtmqvWCoqaQ8NSz042YZhHmSLHsvl0swMQCs0
sGXv5Hnz4yOwEWobSCKRYpZW0Tq8nmuNbLKuGscHr4d+13kfZniBpXKtSGXm
9sGk+hw/8CN78jFZq/2AoLBrdOevZGcAmcaMTJBOhHngR9XMY+/kIeAhkUhJ
SXf5rW3FevzgBiOb8Edh2Az97qvtnfG/wJKcCFhXN9snX9wYG/nohrqEhV3C
9ObH393HpDErqMmv+v5z8TNPqC8UXlhsyrUIeCpEX45PwDsm3MNwRzGD/8XU
A2ZdcJg9V695R906cJHetdMmLVePViYzvA8KfxFGvNBQiPN11eEFNuYTW+GC
q6zbsA6IOjTJGcjHvqXPkp0rtMlHVNjFpzdj0piRpVswWsbPPPCjbq8p/x5U
rsADExx/Pl/e36X+lvAqrOr97yMnzJjIzQJmyC6rHzaEGwzYU/WN8BOwG3A/
6L4qsqamsxubFRuH0TiUBGAHbO7kAL0Lj1pB+MJfV19NtoKzoq0W5qhJMUjX
1aOVySwLb4V2JlzafdDJUomeUVuepIQJZfptQ/HD0GUsLndV2ZPP8qZluuTD
r1V6650XH90d9g52vGe7q9ItmKcc3v8YC01gHhqf0E3c8lvZJy3LLpniKzIC
CaUU4fwri4cG3vgw2BO4MUKDnp4Ak/DtNNWbTRB7eq5eE25Thj1wFICIyB3D
L2ZHikharp724kr8KNcxcEH4i+dujYR+97n8LoeDufoFlhS1dKfL3xQ7Q8u7
nJCP9tIVovRmr9Pgw4FeV2nMWq2YXT0maubRxVe/bf7kRIUsmyV0cShe8IUO
ItiI/zNI7FG4egIlq7rY490hoe0+DPyTisSDBLFH5qoSYo9BcwlKt0hQWq4e
rZ7Msuot+MvQrACHpVuYClxSDNINjsRGPs1tP9EjH1F687cH1iM7E473bA89
V/G36FEPwjaBLXjYFWvwlZ+Er/yKSIrwQmOcM/z8i3T1yDaINMUrpLF/srpw
SLjBpLBHAW9aTja1hUY/SRHpbt8bEbl6zt0aEf5i6PjpMI2ZmCdt0vUYhC5d
ak8+Js18dgnSm0e2LQxlHuSqXpajva6pmcemYgse9nJN45EJH5CanuFb4RUJ
OFUw25S5emAM5LuT2WBP7s8DcH7Z3LdCh1hS2KPISuIvZUQMSYpIWr16LhZ+
iB/uak99LvzF0PDW0u6DrtKYiXnSKd0KrxjIx6SZT70gvTk0pQeTxhxzubqa
eQzK8ZitO9ore/Epewmjk15Rj9+E1xq+HtggBnuEwbKcZFoXbpDlMDNTB1gD
MTgmRYgNDpOVMtX3n5ORjNDhs6r3hLdL6n2D25j/ZAAqkNgjO5PC0z4tZzP4
ezhe+FHYDdlDLTyTpEil1ZY5X9yIH/SEiYuY8JarlB5injQLbg8tBwKGfABd
bG4Yg5L24c3BJB+1Yboxx1y6pa5tNE7maT57vtKcPH5ZgisyJuWffwFchTAA
fylkWqT7CABAxj+8m0J26/K1JDKuQJ5eIWZgyqMw2CM7k4qzhLyIsvNDDp84
9XhqIiJXjyyTObSF3UvN+5wM5sQ86Zduukgo+dj389Euae/8Hp/kIzPMAqYx
l26pmSe01lJo8F5TsU4eT7IiIKTxacOhlKLl6sFs0JPsnuSdM5jcbE9CtEAO
2pFij9rVw58lWVstIW0K95zaqsQprcXW8a4eGPeEL3qhzQmXdBadhLeIeTIk
rbk1BvLRLuwS9TDkDdOZMPQ1060pBlt4fs0WUq/ATB6ZbC4NvzXhfP18Szv8
PTPhnQPIIQtfaiUgyeqyAxsXzun+7kN+ATXxH0Y2tIkOezDPYOAsCQ9EdiaF
jMTHNEnR6faR8PUfDVw9sqqN0IH0mYYm+8GcmCdzOj30darIRzu9OSzJB5nS
E2fplpp5zBKYK6pcK1TC2RBjwhQXs6RZRfREC3tkvx4gDSGNyNxNQqdK4tiD
iU4GzpLwsdVysuUkriGSc5W+KuAHdnwB17qjwY61TKFTm6vwVmhbCVIKBbcH
Pm82lHy62xfY3EJATbrpzXwnH92UHnyjM3tTMI9ZN0L4yhBXK1ThMs7RErKK
GfYoeuJpYc+0xHkVmNy1aCSF2KNIyVacJcyZUe8A/sBJlsK3KNTq1QPzF/9b
oetQuApvUW5YdgXzpkPyqW99zeZGmtewRs/hI+rkg+/SE2cas5p5DIq2KLAl
lLAyPTAbCuMp+AxkjM1ubOar12UbrHDsQSai22CP7POEPTFIq269u1Bj6eo5
eOmK+otOqrdkQWRSVuSWfLbsWWxzO2mvWyFargvTpSfObsyKWnUz5qHAlkL8
7OyfMYWpwrKufTadYeCiIzeowB5MT8VMY4/wcghBCIM9ioWQdD9PcqXJO2fu
9P4UOZ7jV+CSuXrUw6mT5oTU7rI8pBVkCSWfJTtX2NxUut2bh9/7y0BKT+jC
W3F2Y1Ywj1Z6FTN4qCtksQljCfNX1f8q81dbdhfknQ+62INZlDPT2MNvk9X+
hx618IQrdgZ5gUgRaWr80r2z60YOvaAYyWFmidrV80Rd3nI8VxQskDInrZTa
UPJZlH/L+L56svb9Mx/N1SCfzu8Nr//v2PPgZFvowcbWmdAt88AFKu8VRZ1I
mCviTYjCuVsrFcdfydVz9ZpixXO+ipywxzPYEwUOhR618ITrensIe2LW46mJ
0lcFmfNnW7HextUDY6Pa1eNk7S0q3SozaZGPet0uywbO2j0M/62eHVOxHltK
j+K9wIB5KJkHL96V502I/GUSRqOYkJSicB4GBkld7BECVSAkl13skbl6pk2x
Rze3h7JSk9Kj0vD4H9/zO3/wdesyV4+6K4uTdSgoKlqWwpNP6IqlQD42Je26
ST7DH/wFpmL9y/GJeFJ6FC0dDJgHnugIrnbZio9kMVQQzr+KoQxPKbJOiZhl
GiozpVkIigo6tcEe2RJslNKcuEpfFVid1+7iGuRgePDSFcF2wrJ6qppaLId0
WQYgqQykRT6A6AoUsWzmo5fk0/m90h+LoUcXT0qPW+YRenRJCvGJsqw3nbBf
gbDkikmLUjATsZP1UssDe3jzxwRDz5KTvj2EPSnRo9Iwsm5d1pZZndWzpLNo
P6RTSk95C08+G4ofXi98X0EjNiXtup184K1BfVyxdemROc+JeWITHx4CFuLn
SkWEazpp7JF5kDDtCrOIPf6nJvQsCftSytpEULvClAs/MAr93qGunjmNeyyH
dOpMWAnSIh81jSxvWmZ8s+l28vnTYKvsiCyrcvAmC5roMg88yNSN0Fg84gpn
fHWwHk8pSM+MFvbIVhjHLE6ROewJjWFh1uSSrUQmPGpanCI9wi8TKazpUK/d
bO/qofBW5QhPPvniRjWN2BR2bdmzGI89I4deeFQa5o8FZgpZuY1bk71vnrs1
QswTp4RxLv56qesy8JQiWxkz8JKI36DMM8m7p8oDewLbCT1Lst7Owv3BZIaT
khKQDHJUrD31uXAL6u4rlq6e8ghv4Rtla1lohCWLCi0J9Ky9uFJxciwLu7SW
6xJeCOOlmrRM9tqu25OQmMeJQnPXZc4BT6EF7MwU/RACiUOYDQJBKRCdj59G
gT1Ag4FjBJMlIfOfxBy1+sHBfEa4P/CXfpSFCUt2daiMKyVS+2r8Joz4q98o
7V095XGfEPZoCT9lq5v52KQ369azB0JdshwJtyZr0aPLPNScx5VCuzOFdpi3
DIzynhnLDQo5LQrskcXXkIYJ7fmN97nxn+GxR9GJAs48fF5xFOXxCl8eQsYU
YBQVfl292LplAVfZNGQm7NEVcuIOLWm3SW9+e9fr+GvhD3XB4BZDxbqsdAvv
LvOYh5rzuFIo7oZ2HrOkFD4N0nKDwh3OOvYI48L8x4QTkPF+UqPClAgf4eoY
uKD7dftePWXTnJCwx0BXRscwdyaQj7qwyya9ubtdxVQBu9v3BtvzeMJbwjx/
rfaPxDxRSEG8oRGuaTtKEc7mNhuUOduzjj3CBgL8x4TYY9aGS12+R4pT+AiX
MO4PLKT4ykvN+2xuY8X60ZkTYY+ZkIVIoYVdxkk+z9Zt1apnn7xzJp7wlvDN
kZgnDVJAL2YNZWNKkW3cbIOBfJWAMo09shPFf1IWbtBdU1ixXgwpfiEHSfiY
8OvqZGabFbjgplJ09MqcCHuMhSRzdWHXmY/mGif5aLVu/m//9f+IIbwlqwdR
d0on5olHivQPTCMOA0qB+0FR3KS7QdhaaEZldrFHkWDDf1iRZaHIWw78HMW2
UiV8hAumHv7r6mTmhXs7HN7DWRdhj42Qs7k6vbm57SfGdyM+1GVTNY802Zuj
2vUaMHhhIeaJSHB1WGorb5ivn799R/Z1v8EICQYcFepGCN3gqt4TsClWHoV0
SsBX+O3IvEMAUZgPC7eJtwCqyY5a0TRJeGbU5wHezWGD8MnAyw48pABFsEvk
5Emb8K3MhFUe6snoufwu44G9/DLeCXsspc6c90yd3myc5IMMddmQFf7REE4u
Wm0JqVadRCJVppBdCoURLnVn5tC6dYCiqqYWWcJzmbl6pgl7rIXMWlld/IM6
vdk4ySe0qstyFVSkCaMPyNxvYh4SiVThQo6TwgiX+u0yNJm5uqOrZqbUCz4Z
SAEqP1fPNGGPCyHrsj8oblecMZtOPuoGhjb1YkgTJvlrtegh5iGRSBUr/Bui
cJxUe4qe3qHK6oR/DXx+4d6OZxqaFGN71kXY40TIm7a7UKM4aVv2LDajDkUD
w+72BVEzjzClR7d069ytkUQuHIlEIiUuZALkuqO9wq8rXjCrO0IS8ue37pd9
8bV/OlhOBVyeCHtcCZnEok7yMU48lq3VZbMKBsZkKT341fRqaF11EolU2UK+
JAq7FKpruNSdmWfVNiztPqiFWGUgwh6HwhR2qZN8jPNw4Ft8bvPbu16P2tUj
LD85eOkKnnngw/FfKRKJREqJSlNTNl5x9byjbtczp3FPBY7MhD1uhYF2dZKP
cdVVoI2PTUcgpAm79Gitrg4PbPzXiEQikdIj/Jgp/LqiS2FohGvh3g7Zd8t4
MUTCHrdSFxJ6pk7yMU5CBtTxNhJ1ox5hhr/Wqlu1pz5P5BqRSCRSeoR0jwsH
THWTQ3UN16zaBtkX83398Z+H2ETY41yY9Gb1QqWXu6qerdtqgCLzGtawLcSQ
ySzsfItPY6ZWzCQSiTSNbv4mjDqpFwtQ13ApIlzlnW9J2BOFMPSuXq7LmFtY
32YzasKbsEksvhszlauTSCQSE3LYhBdq/ruK4pGl3QfVw7gswgXjc/wnIU4R
9kQkDMC3F1c6D3UB8ESdyTy7sZkPb2ml9AifXxKJRKo0wQsgctgUfl2RVKBe
h0sR4Sr7lEvCnoiETPKJItQVtfEV61opPeXtPiWRSCS8kJ1PhIk9amSa07hH
MYw/l98l+2LZd1Ej7IlOmCQfdT17DGtp6ZpwfRZ8Sk/Zv0eQSCQSXsjcAGHH
HjUyqUvXZV0KZW6lchJhT6TCJPnsLq5RnMkYVk7H2/Mt7fwx4lN6hIvokUgk
UsUKmc8sdJIrOvaEJvYs6SwKv1jeNVxMhD1RC3NXny4sUoS6YlhIFGl8eAu/
lMybHx8p40YQJBKJZCDk+CmsAVG42dWJPU/U5bX4qsxE2BO1MHkv6lCX8Vpd
bo2v3ipNTSk6ZQWM0phJJBLJL3XXHb8Jv674/NzdbYrBXFG6Xgkvp4Q9MQhT
5aSu6prXsCZZ5hFWb+EX3irjPuek6DQ5+MXE0XzSe0EiRSWkt1yYz6z+rreE
utBkiT1lvA6XX4Q98QhDCIqqruMHfpQs9nw6dCOwFC++Yp26MZPwYqgzuvNX
w//pr5hNDV9OeqdIpEiE7M8szGdWNypUj+eyxJ4KKTkh7IlHmHiQuoFhDOuK
Klw9YC/v7/IfDrJiHT5G3ZhJavGo47cHJ9tkX7z3cBKAfNNnfdWFQ3ziGYmU
ciHrQYTecsV3gWoU47miY08lJPZME/bEKIw/8+yul2WnNA1tfDyHDz68RSk9
JKGmhi8rUMdvYy0r/V8EvGGcAyjuvzlbBy4mdSwkkpmQZVzCUVTxXXU+8zMN
TbIvVkjzfMKeOKVm+/yH/zC89q9uHpgjO6uJt/FZdvjYtE54S+ibJVWsAHUe
nGwDjLn1zouhtOPZyLaF/o2s6j0hvDmFHaVIpDQL2fFMmGasCB+o85nhX2Vf
jP8MJCLCnjilCHX95p86L6yf96/j/Ht/qTixiec237z/ABneoi49pIC+PbAe
Tzt+e/zdfW8jrQMXhXemPwhLImVCyPdH3e8+l9+lGMNl+cyVk4RJ2BOzZKGu
fb//O2+Qv7lL6vBJPLf5x/Lenn6jxUZJvEr9RTPsmRz8wtvIp0M3hHfm7Mbm
BA+NRNIVvAVjxlJhdZV6WQp1Gder7Z3pd86znL2IbF372rd3ve7cYLPR7fOX
GZ9P+VDX6gNtfzbOr/+rm51SpFyyc0WC2DOrtmFp98HQR/X44PWkTzMpdZoa
vmyGPYGsZtnNmdRxkUgGiq56XT2GZ2LQhok+2Rf8tBlwYNLXxEp8GdQ/v7c4
MM7frP8LRW5zsn2bFYu5VJqzlKQrM+wZ79nu30ggmdkzKuYiZUhI7BEWlRtX
ryvKuFJVfkLYE7CsY8/0n2cFb2v9vXCoV+Q2J1jMnlM2Nq+hinWSUpjSLd7g
W/6NvLy/K86RYWh8AmYEsIOXroDBNARgDwa3OiWwkYylRhfPhNXrioY/r7Z3
KkZvRRlXqsZtwp54BreY5dWAn333FfFor8xtTraYfeHeDtmzA0SX9KklpVfj
PdsNsAdZzFXff87t3mJmJbe/SKocIXsV6jbtUWPPc/ldmbiTCXsCVh7Yw9bq
+teidflof7NF6vBZ3rQswUsge2WohNV7STZ6cLLNAHvA/BuRDYnOa9gxS865
/UVS5QiJPcIXSUXTnpea9ymGbln1etoyEwh7AlYe2AM6dfnCtbVzVS+5O15J
Z3oPWHVHF4W3SLqaHPzCDHse3R32NiKrYWd9pRwK003O7S+SKkdI7NHtVWjW
tIewJ+VWNtgzcTSvHurh1fje2XU89tS3vpb4VeDX8E1VIQApnQJ6McMeTA27
89Y9GOxJVSIoKUNCrkwhvMEUfQ7V2CPLT0jbalyEPQErD+wJHf9vvfPi4+/u
P56aGDn0QmyJPVU7NuA/7F/PLm0vC6TUirCHRJq2W5lC8Xl1r0JZ0x5hBlGC
IuwJWHlgz1jLSvU4/+2B9eyT9y81xOPqebL2/ctdVfhG0FVNLd5TI2yfTiLx
0lqZwrOJo3n/RoQ3pPOOhZgwBGEPyUwRYY9Zr0LCnpRbGWAPJsPBS2YIOHyi
W5/i7V2vw/a72xcgP++1LkzbI0NKs8xq2DHYk3PdsZCwhxSdkNgjfKN0jj1p
S1Eg7AlYGWDPN3XV6kE+0Kik9FUh6sUpmKtHl6xeat4n7J1OIslE2EMiTaOx
R/hdY+zJym1M2BOwrGMPZmWihwNBlrh9ZEGkK1MwVw8zvMPnibp8342biZxG
UkZF2EMiTRP2KEXYE7BMY8/j7+6H5jYEmrMxlb4qnPlobkSn1O/q0XX4OG+W
QipvhWa1qVPdmJ6qbxTejW53FYM9FOElmYmwRyHCnoBlGntCi9bBSv1F4Xd/
8YeoCrj8rh5dhw9MQPceTsZ8GknZFeYRCA37ytancLurhD2k6IRphknYQ8Ys
u9jz6O6wmasHBGghe8O1NN7Vo+vwcd4mjlTGIuwhkaZnliJldu7srsOFX7QX
V3r2T6f2wn2V7+uXNQYh7Kk0yy72fHtgvbGrJ7rbgHf16Dp8crT4NQmtSLFn
7NQv1aa1q4Q9pBgUaFECBn+j/gphT6VZRrEHU7SeHlcPM3wGtfNOcaRyVaTY
o1i9l5nWrhL2kGIQYQ8vwp6AZRR7MAUsfAEXU/yuHmZaSdStAxdjPqWkLIqw
h0Tyi7CHF2FPwLKIPZii9cDA7ikpV4/uUu+U20zCyEkBu+yJiB970tbnjZQ5
xYk9rMEsYU/mLHPYgylaH/7zVYf8Wnb4WERnclH+rdBpQmu1d8ptJoUq0r49
8WNP2uYLUub0p8HWwF16t+8N9VeMsYcWp8ioZQ57MJnMgbYknr4cn4j0ZJ75
aG7oTPH2rtfL+OqQYhZhD4nk1+SdM4G7NDT3nrCn0ixbEysmk/nWOy96K3AF
FJ2rhxnG4XNTZ8332Y3NFOoiKRS6Mkt02HP7yAKtXSXsIcUgA+x58+Mjshty
TuMexfhM2JNRyxb2jGxbqDuke4ra1cOsu31BKPZoFbOv6j0R80kmZUgGzDPM
NXYQ3ngA5+rbWLeAvfnsecIeUtQywB5Fh+e5u9sUg/P81v3Cb+X7+uM5WKQI
ewKWIezBFK3Iitan5eUqbm1ewxqMw0dr5Xdq40OSyQx7/JlvMAKY3cm62INZ
PoCwh2QpHntC3ZLG2AP/KvyWrC9iUiLsCVhWsGdq+LLueO6XbGyPwjAOnzMf
zcXnNj/f0h7z2SZlQpiYb7awZ7RUcn2SSBUn3SQ0xZ05v3W/YmSWYc+6o+Le
KUmJsCdgWcEeTA7DWMtK2deBHGI7pVU7NmAcPlq5zbREKYnXw4FeM+x5/N19
byOtAxeFt9ySnSvUN/D4H9/T2lsM9rg+Q6RKlC72KLLOXm3vVAzLzzQ0ZeJO
JuwJWCawBxPeUmQyywb26Ky+9TUM+eBzm7NypUhxyqxXIZh/I7IhUd178yai
HUpAocyTtsmClFHx9+qjknhqYFJgT3WHKjVCgT2p8lsS9mRuMkWGtx6cbBN+
Pbr+hAoDngltXXhTM7eZqrpIAY21rDRgnm/qqv0bWdV7Qni/bdmzWH33/mmw
VWtvQ5nnzY+PuDw7pErV2KlfBu7VyTtnFJ8/d2tEcVuqh+VMZKkR9gQs/diD
CW8FRnK/krrioS/LzPALdeWoqov05zKrXkeuTBGaoqaeSgIqTU2FYk/aEkFJ
GRWPPQ9vHld8HhBFcVs+UZdXjMlLOovCb6Wqhp2wJ2Apx57xnu2YkXxq+LLw
6/EUrQvtydr3Md0Ltfo2g/VcvRbzJSClVmYRrkCHh9mNzcI77fiBH6lv3anx
S/hdVc8shD0kh7p3dp1WQFbN5F7Hwie31z77XjAtQda6p/ns+diON1nxkOnE
dCsmykbIQhVZo57puIrWZYbsXtjc9hP8NmmtLhKTcRkXpmlPznWLZgz2VM5M
QYpU/LJcoen3/N34zr6mba2/3/f7v2vb8vOu373Cnp3NG34eeExeat4nvJk3
f1IpnnnCHod6/N19THNC+Iy/LMWvnqvXEmQeZphi9puabXyA5WK+FqQUyjif
GVO9HtqrMIoWzamKC5Cyq9JXBd05tLFz1we7/zNAzj+/t/jsu6/Inh3gn8CT
Mqdxj+x+judgExdhj0Mh0zVljXruPZyUee/jNGQxu1YbnxzVs5NMV+Ma/vMy
LlmRo/OmPbT8Oik2ITsWlvqL8BBhXq79FnhSnt7RmIms5uhE2ONKD062Ye7A
8Z7tsi2kJ4krtCKGGXxMa7MpT8oiRS0z5kGWcYUm5EfRtKdCpglS1Ho8NcHf
sfzHzF4c+PSeCsd4wh4nQlasK8Jb52/fSZx2PHuy9n1MMftNzVAXJflUsowb
FQbeFGTJb6GNp3Sr1zd/ciIUe1LV6oSUaY0ceiFwx/KFh2Zh4iWbfh14WGRZ
zWlbmSsiEfbYC5nSMyyv3ppOOpOZN2Rus25VFyX5VKyQFY68IfOZQ8u4tKrX
p6lXISle8XNx6atC4DNm7w58VrNsiYoK6UNF2GMvZEqPonqrvv9c4pzDGzK3
WauqK0dJPpUq3YQEz/ydzBVO0dAbVWtvh8YnQpmncipfSDFo/I/vBe5YvoYd
GVYIGJ/V/Fx+l+yuhjs/kcOPU4Q9lkKm9CiaE345PhF/T2aMIfs2gy3Kv6W1
ZerkU2kyG66HZ+LC/u3IXhBC85l1y7jUXXCZUdMekkP9abAVM42aPUeB52VW
bUMlFycS9tgIOZjfeudFRXiruhDSSzxBQ/ZtBjrSWqsLMA9e2+O8UqRkZRzh
+vbAev92ZA9L6I167+w6rR2m6nVSzOKLuUYOvcB/zCyred7WtYFHprqjq2J9
mIQ9xnr83X3gGcwtJ1t7azodjXrUFpoywUxrrS6w51vaKb25cmQc4Xo40Ovf
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
                "], {{0, 0}, {765, 324}}, {0, 255}, ColorFunction -> 
                RGBColor], ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0, 765}, {0, 324}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Arduino\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected (/dev/ttyACM0)", 
                    "Not connected (/dev/ttyACM0)"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"Arduino", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}, {
                 TagBox[
                  DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"Arduino", 1}], 
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$, 
                    Devices`DeviceAPI`DeviceDump`reg$$}, 
                   DynamicBox[
                    ToBoxes[
                    Devices`DeviceAPI`DeviceDump`reg$$ = 
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`props$$ = 
                    DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`vals$$ = 
                    Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"Arduino", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 
                  2.5}}}]}, {
                 RGBColor[0.7, 0.7, 0.7], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 2.5}}}, 
                  CurveClosed -> {1}]}, {
                 FaceForm[{
                   RGBColor[
                   0.45999999999999996`, 0.45999999999999996`, 
                    0.45999999999999996`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
                  20.542}, {11.020999999999999`, 20.542}}}]}, {
                 FaceForm[{
                   RGBColor[0.7, 0.7, 0.7], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  15.979000000000001`, 16.541999999999998`}, {
                  10.020999999999999`, 16.541999999999998`}, {
                  10.020999999999999`, 10.542}, {12.020999999999999`, 
                  10.542}, {12.020999999999999`, 0.5}, {13.979000000000001`, 
                  0.5}, {13.979000000000001`, 10.542}, {15.979000000000001`, 
                  10.542}, {15.979000000000001`, 16.541999999999998`}}}]}}, 
               AspectRatio -> Automatic, ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0., 26.}, {0., 26.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Camera\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected (HP Wide Vision HD: HP Wide Visi)", 
                    "Not connected (HP Wide Vision HD: HP Wide Visi)"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"Camera", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                    Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm], 
                    ImageSizeCache -> {262., {4., 10.}}], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 
                  2.5}}}]}, {
                 RGBColor[0.7, 0.7, 0.7], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 2.5}}}, 
                  CurveClosed -> {1}]}, {
                 FaceForm[{
                   RGBColor[
                   0.45999999999999996`, 0.45999999999999996`, 
                    0.45999999999999996`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
                  20.542}, {11.020999999999999`, 20.542}}}]}, {
                 FaceForm[{
                   RGBColor[0.7, 0.7, 0.7], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  15.979000000000001`, 16.541999999999998`}, {
                  10.020999999999999`, 16.541999999999998`}, {
                  10.020999999999999`, 10.542}, {12.020999999999999`, 
                  10.542}, {12.020999999999999`, 0.5}, {13.979000000000001`, 
                  0.5}, {13.979000000000001`, 10.542}, {15.979000000000001`, 
                  10.542}, {15.979000000000001`, 16.541999999999998`}}}]}}, 
               AspectRatio -> Automatic, ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0., 26.}, {0., 26.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Camera\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected (HP Wide Vision HD: HP Wide Visi)", 
                    "Not connected (HP Wide Vision HD: HP Wide Visi)"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"Camera", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}, {
                 TagBox[
                  DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"Camera", 1}], 
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$, 
                    Devices`DeviceAPI`DeviceDump`reg$$}, 
                   DynamicBox[
                    ToBoxes[
                    Devices`DeviceAPI`DeviceDump`reg$$ = 
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`props$$ = 
                    DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`vals$$ = 
                    Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"Camera", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 
                  2.5}}}]}, {
                 RGBColor[0.7, 0.7, 0.7], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 2.5}}}, 
                  CurveClosed -> {1}]}, {
                 FaceForm[{
                   RGBColor[
                   0.45999999999999996`, 0.45999999999999996`, 
                    0.45999999999999996`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
                  20.542}, {11.020999999999999`, 20.542}}}]}, {
                 FaceForm[{
                   RGBColor[0.7, 0.7, 0.7], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  15.979000000000001`, 16.541999999999998`}, {
                  10.020999999999999`, 16.541999999999998`}, {
                  10.020999999999999`, 10.542}, {12.020999999999999`, 
                  10.542}, {12.020999999999999`, 0.5}, {13.979000000000001`, 
                  0.5}, {13.979000000000001`, 10.542}, {15.979000000000001`, 
                  10.542}, {15.979000000000001`, 16.541999999999998`}}}]}}, 
               AspectRatio -> Automatic, ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0., 26.}, {0., 26.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"FunctionDemo\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected", "Not connected"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"FunctionDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                    Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm], 
                    ImageSizeCache -> {88., {4., 10.}}], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 
                  2.5}}}]}, {
                 RGBColor[0.7, 0.7, 0.7], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 2.5}}}, 
                  CurveClosed -> {1}]}, {
                 FaceForm[{
                   RGBColor[
                   0.45999999999999996`, 0.45999999999999996`, 
                    0.45999999999999996`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
                  20.542}, {11.020999999999999`, 20.542}}}]}, {
                 FaceForm[{
                   RGBColor[0.7, 0.7, 0.7], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  15.979000000000001`, 16.541999999999998`}, {
                  10.020999999999999`, 16.541999999999998`}, {
                  10.020999999999999`, 10.542}, {12.020999999999999`, 
                  10.542}, {12.020999999999999`, 0.5}, {13.979000000000001`, 
                  0.5}, {13.979000000000001`, 10.542}, {15.979000000000001`, 
                  10.542}, {15.979000000000001`, 16.541999999999998`}}}]}}, 
               AspectRatio -> Automatic, ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0., 26.}, {0., 26.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"FunctionDemo\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected", "Not connected"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"FunctionDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}, {
                 TagBox[
                  DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"FunctionDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$, 
                    Devices`DeviceAPI`DeviceDump`reg$$}, 
                   DynamicBox[
                    ToBoxes[
                    Devices`DeviceAPI`DeviceDump`reg$$ = 
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`props$$ = 
                    DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`vals$$ = 
                    Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"FunctionDemo", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 
                  2.5}}}]}, {
                 RGBColor[0.7, 0.7, 0.7], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 2.5}}}, 
                  CurveClosed -> {1}]}, {
                 FaceForm[{
                   RGBColor[
                   0.45999999999999996`, 0.45999999999999996`, 
                    0.45999999999999996`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
                  20.542}, {11.020999999999999`, 20.542}}}]}, {
                 FaceForm[{
                   RGBColor[0.7, 0.7, 0.7], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  15.979000000000001`, 16.541999999999998`}, {
                  10.020999999999999`, 16.541999999999998`}, {
                  10.020999999999999`, 10.542}, {12.020999999999999`, 
                  10.542}, {12.020999999999999`, 0.5}, {13.979000000000001`, 
                  0.5}, {13.979000000000001`, 10.542}, {15.979000000000001`, 
                  10.542}, {15.979000000000001`, 16.541999999999998`}}}]}}, 
               AspectRatio -> Automatic, ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0., 26.}, {0., 26.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"RandomSignalDemo\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected", "Not connected"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"RandomSignalDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                    Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm], 
                    ImageSizeCache -> {88., {4., 10.}}], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 
                  2.5}}}]}, {
                 RGBColor[0.7, 0.7, 0.7], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 2.5}}}, 
                  CurveClosed -> {1}]}, {
                 FaceForm[{
                   RGBColor[
                   0.45999999999999996`, 0.45999999999999996`, 
                    0.45999999999999996`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
                  20.542}, {11.020999999999999`, 20.542}}}]}, {
                 FaceForm[{
                   RGBColor[0.7, 0.7, 0.7], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  15.979000000000001`, 16.541999999999998`}, {
                  10.020999999999999`, 16.541999999999998`}, {
                  10.020999999999999`, 10.542}, {12.020999999999999`, 
                  10.542}, {12.020999999999999`, 0.5}, {13.979000000000001`, 
                  0.5}, {13.979000000000001`, 10.542}, {15.979000000000001`, 
                  10.542}, {15.979000000000001`, 16.541999999999998`}}}]}}, 
               AspectRatio -> Automatic, ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0., 26.}, {0., 26.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"RandomSignalDemo\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected", "Not connected"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"RandomSignalDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}, {
                 TagBox[
                  DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"RandomSignalDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$, 
                    Devices`DeviceAPI`DeviceDump`reg$$}, 
                   DynamicBox[
                    ToBoxes[
                    Devices`DeviceAPI`DeviceDump`reg$$ = 
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`props$$ = 
                    DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`vals$$ = 
                    Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"RandomSignalDemo", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 
                  2.5}}}]}, {
                 RGBColor[0.7, 0.7, 0.7], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 2.5}}}, 
                  CurveClosed -> {1}]}, {
                 FaceForm[{
                   RGBColor[
                   0.45999999999999996`, 0.45999999999999996`, 
                    0.45999999999999996`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
                  20.542}, {11.020999999999999`, 20.542}}}]}, {
                 FaceForm[{
                   RGBColor[0.7, 0.7, 0.7], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  15.979000000000001`, 16.541999999999998`}, {
                  10.020999999999999`, 16.541999999999998`}, {
                  10.020999999999999`, 10.542}, {12.020999999999999`, 
                  10.542}, {12.020999999999999`, 0.5}, {13.979000000000001`, 
                  0.5}, {13.979000000000001`, 10.542}, {15.979000000000001`, 
                  10.542}, {15.979000000000001`, 16.541999999999998`}}}]}}, 
               AspectRatio -> Automatic, ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0., 26.}, {0., 26.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"WriteDemo\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected", "Not connected"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"WriteDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                    Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm], 
                    ImageSizeCache -> {88., {4., 10.}}], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], Appearance -> None, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{
                Thickness[0.038461538461538464`], {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 
                  2.5}}}]}, {
                 RGBColor[0.7, 0.7, 0.7], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 
                  2.5}, {25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 
                  0.5}, {1.395, 0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {
                  0.5, 24.605}, {1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {
                  24.605, 25.5}, {25.5, 24.605}, {25.5, 23.5}, {25.5, 2.5}}}, 
                  CurveClosed -> {1}]}, {
                 FaceForm[{
                   RGBColor[
                   0.45999999999999996`, 0.45999999999999996`, 
                    0.45999999999999996`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
                  20.542}, {11.020999999999999`, 20.542}}}]}, {
                 FaceForm[{
                   RGBColor[0.7, 0.7, 0.7], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                  15.979000000000001`, 16.541999999999998`}, {
                  10.020999999999999`, 16.541999999999998`}, {
                  10.020999999999999`, 10.542}, {12.020999999999999`, 
                  10.542}, {12.020999999999999`, 0.5}, {13.979000000000001`, 
                  0.5}, {13.979000000000001`, 10.542}, {15.979000000000001`, 
                  10.542}, {15.979000000000001`, 16.541999999999998`}}}]}}, 
               AspectRatio -> Automatic, ImageSize -> {Automatic, 
                 Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
               PlotRange -> {{0., 26.}, {0., 26.}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"WriteDemo\"", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected", "Not connected"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"WriteDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$}, 
                    DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], 
                 "\[SpanFromLeft]"}, {
                 TagBox[
                  DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"WriteDemo", 1}], 
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$, 
                    Devices`DeviceAPI`DeviceDump`reg$$}, 
                   DynamicBox[
                    ToBoxes[
                    Devices`DeviceAPI`DeviceDump`reg$$ = 
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`props$$ = 
                    DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                    Devices`DeviceAPI`DeviceDump`vals$$ = 
                    Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"], 
                 "\[SpanFromLeft]"}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"WriteDemo", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{{3.7817554923404255`*^9, 3.781755504609636*^9}, 
   3.781755538389536*^9, 3.781755574168662*^9, 3.781768334166998*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"9c262cfc-b280-4f35-9591-578cc2b64044"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", " ", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<Arduino\>\"", ",", "\"\</dev/ttyACM0\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.781755803571748*^9, 3.7817558155713415`*^9}, {
  3.781756211945551*^9, 3.7817562195621777`*^9}, {3.781768219494163*^9, 
  3.781768228148597*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"fb5098db-c9d4-43ab-91ae-69b65324936b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"], 
               ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1: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
MM7frP8LRW5zsn2bFYu5VJqzlKQrM+wZ79nu30ggmdkzKuYiZUhI7BEWlRtX
ryvKuFJVfkLYE7CsY8/0n2cFb2v9vXCoV+Q2J1jMnlM2Nq+hinWSUpjSLd7g
W/6NvLy/K86RYWh8AmYEsIOXroDBNARgDwa3OiWwkYylRhfPhNXrioY/r7Z3
KkZvRRlXqsZtwp54BreY5dWAn333FfFor8xtTraYfeHeDtmzA0SX9KklpVfj
PdsNsAdZzFXff87t3mJmJbe/SKocIXsV6jbtUWPPc/ldmbiTCXsCVh7Yw9bq
+teidflof7NF6vBZ3rQswUsge2WohNV7STZ6cLLNAHvA/BuRDYnOa9gxS865
/UVS5QiJPcIXSUXTnpea9ymGbln1etoyEwh7AlYe2AM6dfnCtbVzVS+5O15J
Z3oPWHVHF4W3SLqaHPzCDHse3R32NiKrYWd9pRwK003O7S+SKkdI7NHtVWjW
tIewJ+VWNtgzcTSvHurh1fje2XU89tS3vpb4VeDX8E1VIQApnQJ6McMeTA27
89Y9GOxJVSIoKUNCrkwhvMEUfQ7V2CPLT0jbalyEPQErD+wJHf9vvfPi4+/u
P56aGDn0QmyJPVU7NuA/7F/PLm0vC6TUirCHRJq2W5lC8Xl1r0JZ0x5hBlGC
IuwJWHlgz1jLSvU4/+2B9eyT9y81xOPqebL2/ctdVfhG0FVNLd5TI2yfTiLx
0lqZwrOJo3n/RoQ3pPOOhZgwBGEPyUwRYY9Zr0LCnpRbGWAPJsPBS2YIOHyi
W5/i7V2vw/a72xcgP++1LkzbI0NKs8xq2DHYk3PdsZCwhxSdkNgjfKN0jj1p
S1Eg7AlYGWDPN3XV6kE+0Kik9FUh6sUpmKtHl6xeat4n7J1OIslE2EMiTaOx
R/hdY+zJym1M2BOwrGMPZmWihwNBlrh9ZEGkK1MwVw8zvMPnibp8342biZxG
UkZF2EMiTRP2KEXYE7BMY8/j7+6H5jYEmrMxlb4qnPlobkSn1O/q0XX4OG+W
QipvhWa1qVPdmJ6qbxTejW53FYM9FOElmYmwRyHCnoBlGntCi9bBSv1F4Xd/
8YeoCrj8rh5dhw9MQPceTsZ8GknZFeYRCA37ytancLurhD2k6IRphknYQ8Ys
u9jz6O6wmasHBGghe8O1NN7Vo+vwcd4mjlTGIuwhkaZnliJldu7srsOFX7QX
V3r2T6f2wn2V7+uXNQYh7Kk0yy72fHtgvbGrJ7rbgHf16Dp8crT4NQmtSLFn
7NQv1aa1q4Q9pBgUaFECBn+j/gphT6VZRrEHU7SeHlcPM3wGtfNOcaRyVaTY
o1i9l5nWrhL2kGIQYQ8vwp6AZRR7MAUsfAEXU/yuHmZaSdStAxdjPqWkLIqw
h0Tyi7CHF2FPwLKIPZii9cDA7ikpV4/uUu+U20zCyEkBu+yJiB970tbnjZQ5
xYk9rMEsYU/mLHPYgylaH/7zVYf8Wnb4WERnclH+rdBpQmu1d8ptJoUq0r49
8WNP2uYLUub0p8HWwF16t+8N9VeMsYcWp8ioZQ57MJnMgbYknr4cn4j0ZJ75
aG7oTPH2rtfL+OqQYhZhD4nk1+SdM4G7NDT3nrCn0ixbEysmk/nWOy96K3AF
FJ2rhxnG4XNTZ8332Y3NFOoiKRS6Mkt02HP7yAKtXSXsIcUgA+x58+Mjshty
TuMexfhM2JNRyxb2jGxbqDuke4ra1cOsu31BKPZoFbOv6j0R80kmZUgGzDPM
NXYQ3ngA5+rbWLeAvfnsecIeUtQywB5Fh+e5u9sUg/P81v3Cb+X7+uM5WKQI
ewKWIezBFK3Iitan5eUqbm1ewxqMw0dr5Xdq40OSyQx7/JlvMAKY3cm62INZ
PoCwh2QpHntC3ZLG2AP/KvyWrC9iUiLsCVhWsGdq+LLueO6XbGyPwjAOnzMf
zcXnNj/f0h7z2SZlQpiYb7awZ7RUcn2SSBUn3SQ0xZ05v3W/YmSWYc+6o+Le
KUmJsCdgWcEeTA7DWMtK2deBHGI7pVU7NmAcPlq5zbREKYnXw4FeM+x5/N19
byOtAxeFt9ySnSvUN/D4H9/T2lsM9rg+Q6RKlC72KLLOXm3vVAzLzzQ0ZeJO
JuwJWCawBxPeUmQyywb26Ky+9TUM+eBzm7NypUhxyqxXIZh/I7IhUd178yai
HUpAocyTtsmClFHx9+qjknhqYFJgT3WHKjVCgT2p8lsS9mRuMkWGtx6cbBN+
Pbr+hAoDngltXXhTM7eZqrpIAY21rDRgnm/qqv0bWdV7Qni/bdmzWH33/mmw
VWtvQ5nnzY+PuDw7pErV2KlfBu7VyTtnFJ8/d2tEcVuqh+VMZKkR9gQs/diD
CW8FRnK/krrioS/LzPALdeWoqov05zKrXkeuTBGaoqaeSgIqTU2FYk/aEkFJ
GRWPPQ9vHld8HhBFcVs+UZdXjMlLOovCb6Wqhp2wJ2Apx57xnu2YkXxq+LLw
6/EUrQvtydr3Md0Ltfo2g/VcvRbzJSClVmYRrkCHh9mNzcI77fiBH6lv3anx
S/hdVc8shD0kh7p3dp1WQFbN5F7Hwie31z77XjAtQda6p/ns+diON1nxkOnE
dCsmykbIQhVZo57puIrWZYbsXtjc9hP8NmmtLhKTcRkXpmlPznWLZgz2VM5M
QYpU/LJcoen3/N34zr6mba2/3/f7v2vb8vOu373Cnp3NG34eeExeat4nvJk3
f1IpnnnCHod6/N19THNC+Iy/LMWvnqvXEmQeZphi9puabXyA5WK+FqQUyjif
GVO9HtqrMIoWzamKC5Cyq9JXBd05tLFz1we7/zNAzj+/t/jsu6/Inh3gn8CT
Mqdxj+x+judgExdhj0Mh0zVljXruPZyUee/jNGQxu1YbnxzVs5NMV+Ma/vMy
LlmRo/OmPbT8Oik2ITsWlvqL8BBhXq79FnhSnt7RmIms5uhE2ONKD062Ye7A
8Z7tsi2kJ4krtCKGGXxMa7MpT8oiRS0z5kGWcYUm5EfRtKdCpglS1Ho8NcHf
sfzHzF4c+PSeCsd4wh4nQlasK8Jb52/fSZx2PHuy9n1MMftNzVAXJflUsowb
FQbeFGTJb6GNp3Sr1zd/ciIUe1LV6oSUaY0ceiFwx/KFh2Zh4iWbfh14WGRZ
zWlbmSsiEfbYC5nSMyyv3ppOOpOZN2Rus25VFyX5VKyQFY68IfOZQ8u4tKrX
p6lXISle8XNx6atC4DNm7w58VrNsiYoK6UNF2GMvZEqPonqrvv9c4pzDGzK3
WauqK0dJPpUq3YQEz/ydzBVO0dAbVWtvh8YnQpmncipfSDFo/I/vBe5YvoYd
GVYIGJ/V/Fx+l+yuhjs/kcOPU4Q9lkKm9CiaE345PhF/T2aMIfs2gy3Kv6W1
ZerkU2kyG66HZ+LC/u3IXhBC85l1y7jUXXCZUdMekkP9abAVM42aPUeB52VW
bUMlFycS9tgIOZjfeudFRXiruhDSSzxBQ/ZtBjrSWqsLMA9e2+O8UqRkZRzh
+vbAev92ZA9L6I167+w6rR2m6nVSzOKLuUYOvcB/zCyred7WtYFHprqjq2J9
mIQ9xnr83X3gGcwtJ1t7azodjXrUFpoywUxrrS6w51vaKb25cmQc4Xo40Ovf
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
              "], {{0, 0}, {765, 324}}, {0, 255}, ColorFunction -> RGBColor], 
             ImageSize -> {Automatic, 
               Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
             PlotRange -> {{0, 765}, {0, 324}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Arduino\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected (/dev/ttyACM0)", 
                    "Not connected (/dev/ttyACM0)"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"Arduino", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$ = 1, 
                    Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                   DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm], 
                    ImageSizeCache -> {149., {4., 10.}}], 
                   DynamicModuleValues :> {}], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], Appearance -> None, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1: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
MM7frP8LRW5zsn2bFYu5VJqzlKQrM+wZ79nu30ggmdkzKuYiZUhI7BEWlRtX
ryvKuFJVfkLYE7CsY8/0n2cFb2v9vXCoV+Q2J1jMnlM2Nq+hinWSUpjSLd7g
W/6NvLy/K86RYWh8AmYEsIOXroDBNARgDwa3OiWwkYylRhfPhNXrioY/r7Z3
KkZvRRlXqsZtwp54BreY5dWAn333FfFor8xtTraYfeHeDtmzA0SX9KklpVfj
PdsNsAdZzFXff87t3mJmJbe/SKocIXsV6jbtUWPPc/ldmbiTCXsCVh7Yw9bq
+teidflof7NF6vBZ3rQswUsge2WohNV7STZ6cLLNAHvA/BuRDYnOa9gxS865
/UVS5QiJPcIXSUXTnpea9ymGbln1etoyEwh7AlYe2AM6dfnCtbVzVS+5O15J
Z3oPWHVHF4W3SLqaHPzCDHse3R32NiKrYWd9pRwK003O7S+SKkdI7NHtVWjW
tIewJ+VWNtgzcTSvHurh1fje2XU89tS3vpb4VeDX8E1VIQApnQJ6McMeTA27
89Y9GOxJVSIoKUNCrkwhvMEUfQ7V2CPLT0jbalyEPQErD+wJHf9vvfPi4+/u
P56aGDn0QmyJPVU7NuA/7F/PLm0vC6TUirCHRJq2W5lC8Xl1r0JZ0x5hBlGC
IuwJWHlgz1jLSvU4/+2B9eyT9y81xOPqebL2/ctdVfhG0FVNLd5TI2yfTiLx
0lqZwrOJo3n/RoQ3pPOOhZgwBGEPyUwRYY9Zr0LCnpRbGWAPJsPBS2YIOHyi
W5/i7V2vw/a72xcgP++1LkzbI0NKs8xq2DHYk3PdsZCwhxSdkNgjfKN0jj1p
S1Eg7AlYGWDPN3XV6kE+0Kik9FUh6sUpmKtHl6xeat4n7J1OIslE2EMiTaOx
R/hdY+zJym1M2BOwrGMPZmWihwNBlrh9ZEGkK1MwVw8zvMPnibp8342biZxG
UkZF2EMiTRP2KEXYE7BMY8/j7+6H5jYEmrMxlb4qnPlobkSn1O/q0XX4OG+W
QipvhWa1qVPdmJ6qbxTejW53FYM9FOElmYmwRyHCnoBlGntCi9bBSv1F4Xd/
8YeoCrj8rh5dhw9MQPceTsZ8GknZFeYRCA37ytancLurhD2k6IRphknYQ8Ys
u9jz6O6wmasHBGghe8O1NN7Vo+vwcd4mjlTGIuwhkaZnliJldu7srsOFX7QX
V3r2T6f2wn2V7+uXNQYh7Kk0yy72fHtgvbGrJ7rbgHf16Dp8crT4NQmtSLFn
7NQv1aa1q4Q9pBgUaFECBn+j/gphT6VZRrEHU7SeHlcPM3wGtfNOcaRyVaTY
o1i9l5nWrhL2kGIQYQ8vwp6AZRR7MAUsfAEXU/yuHmZaSdStAxdjPqWkLIqw
h0Tyi7CHF2FPwLKIPZii9cDA7ikpV4/uUu+U20zCyEkBu+yJiB970tbnjZQ5
xYk9rMEsYU/mLHPYgylaH/7zVYf8Wnb4WERnclH+rdBpQmu1d8ptJoUq0r49
8WNP2uYLUub0p8HWwF16t+8N9VeMsYcWp8ioZQ57MJnMgbYknr4cn4j0ZJ75
aG7oTPH2rtfL+OqQYhZhD4nk1+SdM4G7NDT3nrCn0ixbEysmk/nWOy96K3AF
FJ2rhxnG4XNTZ8332Y3NFOoiKRS6Mkt02HP7yAKtXSXsIcUgA+x58+Mjshty
TuMexfhM2JNRyxb2jGxbqDuke4ra1cOsu31BKPZoFbOv6j0R80kmZUgGzDPM
NXYQ3ngA5+rbWLeAvfnsecIeUtQywB5Fh+e5u9sUg/P81v3Cb+X7+uM5WKQI
ewKWIezBFK3Iitan5eUqbm1ewxqMw0dr5Xdq40OSyQx7/JlvMAKY3cm62INZ
PoCwh2QpHntC3ZLG2AP/KvyWrC9iUiLsCVhWsGdq+LLueO6XbGyPwjAOnzMf
zcXnNj/f0h7z2SZlQpiYb7awZ7RUcn2SSBUn3SQ0xZ05v3W/YmSWYc+6o+Le
KUmJsCdgWcEeTA7DWMtK2deBHGI7pVU7NmAcPlq5zbREKYnXw4FeM+x5/N19
byOtAxeFt9ySnSvUN/D4H9/T2lsM9rg+Q6RKlC72KLLOXm3vVAzLzzQ0ZeJO
JuwJWCawBxPeUmQyywb26Ky+9TUM+eBzm7NypUhxyqxXIZh/I7IhUd178yai
HUpAocyTtsmClFHx9+qjknhqYFJgT3WHKjVCgT2p8lsS9mRuMkWGtx6cbBN+
Pbr+hAoDngltXXhTM7eZqrpIAY21rDRgnm/qqv0bWdV7Qni/bdmzWH33/mmw
VWtvQ5nnzY+PuDw7pErV2KlfBu7VyTtnFJ8/d2tEcVuqh+VMZKkR9gQs/diD
CW8FRnK/krrioS/LzPALdeWoqov05zKrXkeuTBGaoqaeSgIqTU2FYk/aEkFJ
GRWPPQ9vHld8HhBFcVs+UZdXjMlLOovCb6Wqhp2wJ2Apx57xnu2YkXxq+LLw
6/EUrQvtydr3Md0Ltfo2g/VcvRbzJSClVmYRrkCHh9mNzcI77fiBH6lv3anx
S/hdVc8shD0kh7p3dp1WQFbN5F7Hwie31z77XjAtQda6p/ns+diON1nxkOnE
dCsmykbIQhVZo57puIrWZYbsXtjc9hP8NmmtLhKTcRkXpmlPznWLZgz2VM5M
QYpU/LJcoen3/N34zr6mba2/3/f7v2vb8vOu373Cnp3NG34eeExeat4nvJk3
f1IpnnnCHod6/N19THNC+Iy/LMWvnqvXEmQeZphi9puabXyA5WK+FqQUyjif
GVO9HtqrMIoWzamKC5Cyq9JXBd05tLFz1we7/zNAzj+/t/jsu6/Inh3gn8CT
Mqdxj+x+judgExdhj0Mh0zVljXruPZyUee/jNGQxu1YbnxzVs5NMV+Ma/vMy
LlmRo/OmPbT8Oik2ITsWlvqL8BBhXq79FnhSnt7RmIms5uhE2ONKD062Ye7A
8Z7tsi2kJ4krtCKGGXxMa7MpT8oiRS0z5kGWcYUm5EfRtKdCpglS1Ho8NcHf
sfzHzF4c+PSeCsd4wh4nQlasK8Jb52/fSZx2PHuy9n1MMftNzVAXJflUsowb
FQbeFGTJb6GNp3Sr1zd/ciIUe1LV6oSUaY0ceiFwx/KFh2Zh4iWbfh14WGRZ
zWlbmSsiEfbYC5nSMyyv3ppOOpOZN2Rus25VFyX5VKyQFY68IfOZQ8u4tKrX
p6lXISle8XNx6atC4DNm7w58VrNsiYoK6UNF2GMvZEqPonqrvv9c4pzDGzK3
WauqK0dJPpUq3YQEz/ydzBVO0dAbVWtvh8YnQpmncipfSDFo/I/vBe5YvoYd
GVYIGJ/V/Fx+l+yuhjs/kcOPU4Q9lkKm9CiaE345PhF/T2aMIfs2gy3Kv6W1
ZerkU2kyG66HZ+LC/u3IXhBC85l1y7jUXXCZUdMekkP9abAVM42aPUeB52VW
bUMlFycS9tgIOZjfeudFRXiruhDSSzxBQ/ZtBjrSWqsLMA9e2+O8UqRkZRzh
+vbAev92ZA9L6I167+w6rR2m6nVSzOKLuUYOvcB/zCyred7WtYFHprqjq2J9
mIQ9xnr83X3gGcwtJ1t7azodjXrUFpoywUxrrS6w51vaKb25cmQc4Xo40Ovf
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
              "], {{0, 0}, {765, 324}}, {0, 255}, ColorFunction -> RGBColor], 
             ImageSize -> {Automatic, 
               Dynamic[3.5 CurrentValue["FontCapHeight"]]}, 
             PlotRange -> {{0, 765}, {0, 324}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Arduino\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Status: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                    Style[
                    Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False], 
                    Style[
                    Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                    False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, 
                    Devices`DeviceAPI`DeviceDump`status$$ = {
                    "Connected (/dev/ttyACM0)", 
                    "Not connected (/dev/ttyACM0)"}, 
                    Devices`DeviceAPI`DeviceDump`d$$ = 
                    DeviceObject[{"Arduino", 1}], 
                    Devices`DeviceAPI`DeviceDump`ind$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$}, 
                   DynamicBox[
                    ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                    Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                    Opacity[1], 
                    Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                  DeviceObject[{"Arduino", 1}], 
                  Devices`DeviceAPI`DeviceDump`props$$, 
                  Devices`DeviceAPI`DeviceDump`vals$$, 
                  Devices`DeviceAPI`DeviceDump`reg$$}, 
                 DynamicBox[
                  ToBoxes[
                  Devices`DeviceAPI`DeviceDump`reg$$ = 
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                   Devices`DeviceAPI`DeviceDump`props$$ = 
                    DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                   Devices`DeviceAPI`DeviceDump`vals$$ = 
                    Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]], 
                 DynamicModuleValues :> {}], "SummaryItem"], 
               "\[SpanFromLeft]"}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"Arduino", 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7817562046470766`*^9, 3.781756221196802*^9}, 
   3.781768330644782*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"cd685809-5a95-48b0-8851-2eca496993df"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7817562016092052`*^9, 
  3.7817562023003597`*^9}},ExpressionUUID->"039ca6c6-64a5-45ad-ac4b-\
e05c9d180c36"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeviceWrite", "[", 
  RowBox[{"\"\<Arduino\>\"", ",", 
   RowBox[{"13", "\[Rule]", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.781755949950167*^9, 3.781755972801035*^9}, {
  3.781768358622122*^9, 3.78176835930182*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"8e8fbed7-ef61-49f4-a5d0-b092dd5e6fd4"],

Cell[BoxData[
 RowBox[{"13", "\[Rule]", "1"}]], "Output",
 CellChangeTimes->{{3.781755959986318*^9, 3.781755974501486*^9}, {
  3.7817561687521353`*^9, 3.7817562292263236`*^9}, {3.7817683469847937`*^9, 
  3.781768360774045*^9}},
 CellLabel->"Out[4]=",ExpressionUUID->"be586a29-c500-4729-8344-2f3acbb523ce"]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{
  3.781756194038483*^9},ExpressionUUID->"c84be1b2-16f5-4c9e-94d8-\
cfa9bbd95cda"]
},
WindowSize->{1853, 1053},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"11.3 for Linux x86 (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 28514, 703, 2206, "Input",ExpressionUUID->"d6afe538-2965-47b7-b90b-d7b99bf49e7a"],
Cell[29097, 727, 2719, 38, 413, "Output",ExpressionUUID->"e1b392f1-a0cf-4fce-bfeb-5301b9f46d8a"],
Cell[31819, 767, 2930, 42, 413, "Output",ExpressionUUID->"c5ce907b-4dd7-46f0-839b-4d4363fbc33d"],
Cell[34752, 811, 3905, 76, 59, "Output",ExpressionUUID->"6dcdb9bc-3f89-4a56-bebf-92ef48b1037a"],
Cell[38660, 889, 2943, 41, 413, "Output",ExpressionUUID->"9dcdc2ba-bef4-43d8-a703-c3492da25ac3"],
Cell[41606, 932, 8298, 144, 606, "Output",ExpressionUUID->"54f2f69f-2b81-42ca-83f5-985883f71519"]
}, Open  ]],
Cell[49919, 1079, 154, 3, 31, "Input",ExpressionUUID->"897c64b2-dcbe-4333-9e46-6b03aa81a75b"],
Cell[CellGroupData[{
Cell[50098, 1086, 203, 3, 31, "Input",ExpressionUUID->"c5a1a2f2-c44e-42f7-8473-f4bb06de672b"],
Cell[50304, 1091, 178, 3, 35, "Output",ExpressionUUID->"280262ac-996c-462b-ba3b-2b37a2da0928"]
}, Open  ]],
Cell[50497, 1097, 130, 3, 31, "Input",ExpressionUUID->"b5249e74-0104-4948-bef5-04493a03c107"],
Cell[CellGroupData[{
Cell[50652, 1104, 209, 3, 31, "Input",ExpressionUUID->"45488c99-cd94-4148-9f6f-4a1953521ae0"],
Cell[50864, 1109, 206, 4, 35, "Output",ExpressionUUID->"99cc0fbc-b73b-4db7-9943-4b343b8e5a7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51107, 1118, 419, 10, 31, "Input",ExpressionUUID->"5c914ec3-1e89-48a7-97bd-fd3832591152"],
Cell[51529, 1130, 505, 11, 362, "Output",ExpressionUUID->"2513d278-f55e-4866-ae16-7a63f8af0360"]
}, Open  ]],
Cell[52049, 1144, 1917, 61, 101, "Input",ExpressionUUID->"6046612a-9ed1-4bef-9c99-7d8ce4d44a6b"],
Cell[CellGroupData[{
Cell[53991, 1209, 344, 8, 31, "Input",ExpressionUUID->"0b202695-aaab-47e0-8f68-e5d5eef1bf4d"],
Cell[54338, 1219, 942, 27, 83, "Output",ExpressionUUID->"15ca9c1e-0139-4341-a045-90ec63c3fd9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55317, 1251, 388, 9, 31, "Input",ExpressionUUID->"037f97e8-d7f9-4b8f-a29d-020b3de369d8"],
Cell[55708, 1262, 291, 6, 35, "Output",ExpressionUUID->"a6722baf-843d-4f66-8d6f-a26939e87316"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56036, 1273, 443, 13, 31, "Input",ExpressionUUID->"46b0ce85-680a-45fe-9647-fea9f99c1447"],
Cell[56482, 1288, 450, 9, 445, "Output",ExpressionUUID->"573b51d9-3088-49c6-80b6-6273300b4a6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56969, 1302, 254, 4, 31, "Input",ExpressionUUID->"650f077d-2c33-41b7-a2a9-390a7e9d1bc4"],
Cell[57226, 1308, 165, 3, 35, "Output",ExpressionUUID->"7471e85b-4400-4fb4-bb0e-85cea1c22ea0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57428, 1316, 205, 3, 31, "Input",ExpressionUUID->"d7841be8-c81a-40b2-9781-c0bd75a86721"],
Cell[57636, 1321, 152526, 2737, 127, "Output",ExpressionUUID->"9c262cfc-b280-4f35-9591-578cc2b64044"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210199, 4063, 396, 7, 31, "Input",ExpressionUUID->"fb5098db-c9d4-43ab-91ae-69b65324936b"],
Cell[210598, 4072, 87767, 1484, 67, "Output",ExpressionUUID->"cd685809-5a95-48b0-8851-2eca496993df"]
}, Open  ]],
Cell[298380, 5559, 156, 3, 31, "Input",ExpressionUUID->"039ca6c6-64a5-45ad-ac4b-e05c9d180c36"],
Cell[CellGroupData[{
Cell[298561, 5566, 324, 6, 31, "Input",ExpressionUUID->"8e8fbed7-ef61-49f4-a5d0-b092dd5e6fd4"],
Cell[298888, 5574, 305, 5, 35, "Output",ExpressionUUID->"be586a29-c500-4729-8344-2f3acbb523ce"]
}, Open  ]],
Cell[299208, 5582, 145, 3, 31, "Input",ExpressionUUID->"c84be1b2-16f5-4c9e-94d8-cfa9bbd95cda"]
}
]
*)

